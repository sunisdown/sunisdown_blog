<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SunisDown</title><link href="http://www.sunisdown.me/" rel="alternate"></link><link href="http://www.sunisdown.me/feeds/all.atom.xml" rel="self"></link><id>http://www.sunisdown.me/</id><updated>2016-02-02T00:00:00+08:00</updated><entry><title>One Year</title><link href="http://www.sunisdown.me/one-year.html" rel="alternate"></link><published>2016-02-02T00:00:00+08:00</published><author><name>Sunisdown</name></author><id>tag:www.sunisdown.me,2016-02-02:one-year.html</id><summary type="html">&lt;p&gt;看一下其实有一年没有更新 Blog。再不写点什么对不起自己域名ˊㅅˋ&lt;/p&gt;
&lt;p&gt;再过几天应该就来豆厂一周年了，豆厂大把的业余时间我都拿来做自己感兴趣的事儿。
比如看 v6 代码，研究了下 paxos（然后并没有卵用，还是不懂）。&lt;/p&gt;
&lt;p&gt;认真想一下其实很难写出什么高质量的 Blog，在豆瓣一年，貌似工作中并没有形成成体系的内容。而平时自己折腾的东西，也很难形成体系，写不出很高质量的 Blog。
不过平时自己折腾的东西，倒是可以形成一本笔记，方便自己查阅。所以16年应该会以发布笔记为主，更新 Blog 为辅助。&lt;/p&gt;
&lt;p&gt;我很喜欢豆厂工程师之间沟通的方式，直接在 github 上面沟通代码，每次代码都有人 review 的真的有点幸福。
要知道帮别人 review 代码是一个比较耗费精力的工作，你需要了解这次提交的目的，看一下实现是否优雅，尽可能发现潜在的问题。
所以有一堆技术还不错的小伙伴帮 review 代码，在自己的代码风格上，代码的简洁程度上，都有一定的提升，
至少在提交代码的时候会比较谨慎，不会审核恶心的代码都往里面堆。一定程度上提高了自己对自己的要求。&lt;/p&gt;
&lt;p&gt;之前来豆瓣面试的时候，也曾经表示过自己想要进 DAE 或者做 anti，但是日军哥哥跟我说 anti 跟我现在组用的是同一套东西，技术上基本上是通的的。
于是我来了现在这个组 O_O，经过这一年的接触，我发现还是喜欢 anti 或者 DAE 更多一些。&lt;/p&gt;
&lt;p&gt;所以还是安安静静的做自己的事儿，安安静静做自己感兴趣的事儿。&lt;/p&gt;
</summary></entry><entry><title>理解 Python 的 LEGB</title><link href="http://www.sunisdown.me/li-jie-python-de-legb.html" rel="alternate"></link><published>2015-02-03T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2015-02-03:li-jie-python-de-legb.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;名字空间&lt;/h2&gt;
&lt;p&gt;Python 的名字空间是 Python 一个非常核心的内容。 其他语言中如 C
中，变量名是内存地址的别名，而在 Python
中，名字是一个字符串对象，它与他指向的对象构成一个{name:object}关联。
Python 由很多名字空间，而 LEGB 则是名字空间的一种查找规则。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;作用域&lt;/h2&gt;
&lt;p&gt;Python
中&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;name-object&lt;/span&gt;&lt;/tt&gt;的关联存储在不同的作用域中，各个不同的作用域是相互独立的。而我们就在不同的作用域中搜索&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;name-object&lt;/span&gt;&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;举个栗子，来说明作用域是相互独立的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;G&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;L&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;in locals&amp;quot;&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;in globals&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;globals&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的栗子中，我们定义了两次 i，在 test 函数中是 i-L,在外面是
i-G。为什么在 test 函数中，我们 i 指向的是对象 L，而在外面，i 指向的则是
G？这就是 LEGB 的作用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;简述&lt;/h2&gt;
&lt;p&gt;简而言之，LEGB 代表名字查找顺序:
&lt;tt class="docutils literal"&gt;locals &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; enclosing function &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; globals &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; __builtins__&lt;/tt&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;locals 是函数内的名字空间，包括局部变量和形参&lt;/li&gt;
&lt;li&gt;enclosing 外部嵌套函数的名字空间（闭包中常见）&lt;/li&gt;
&lt;li&gt;globals 全局变量，函数定义所在模块的名字空间&lt;/li&gt;
&lt;li&gt;builtins 内置模块的名字空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，在 Python 中检索一个变量的时候，优先回到 locals
里面来检索，检索不到的情况下会检索 enclosing ，enclosing 没有则到
globals 全局变量里面检索，最后是到 builtins 里面来检索。&lt;/p&gt;
&lt;p&gt;当然，因为 builtins 的特殊性，我们可以直接在 builtins
里面添加变量，这样就可以在任意模块中访问变量，不过这种方法太过于变态，不推荐这么做。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="locals-globals"&gt;
&lt;h2&gt;locals，globals&lt;/h2&gt;
&lt;p&gt;函数的形参跟内部变量都存储在 locals 中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;


&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过在函数内部调用global 声明的时候，可以将变量存储在 globals 中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;d264e11d975&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上面栗子中那样，在函数中声明 a 为全局变量，则函数 f 的 locals只有参数
x，而没有变量，而在外部可以使用变量 a，而使用 x
的时候则是&lt;tt class="docutils literal"&gt;NameError&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enclosed"&gt;
&lt;h2&gt;Enclosed&lt;/h2&gt;
&lt;p&gt;Enclosing 是外部嵌套函数的名字空间。我们经常在闭包中用到。在
Python3中提供了一个
nonlocal关键字来修改外部嵌套函数的名字空间，但是要使用
Python3才有，我等使用 Python2的只能眼馋一下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enclosed value&amp;#39;&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;local value&amp;#39;&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;enclosed&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="n"&gt;enclosed&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面的栗子简单示范一下 nonlocal 的用法，实在
Python3下面才可以正常运行的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;global value&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;a_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;local value&amp;quot;&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;outer befor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;nonlocal&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;a_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;inner value&amp;quot;&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in inner():&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;outer inner:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;outer&lt;/span&gt; &lt;span class="n"&gt;befor&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="n"&gt;outer&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="builtins"&gt;
&lt;h2&gt;builtins&lt;/h2&gt;
&lt;p&gt;builtins 则是内置模块，轻易不要修改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;                                 &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;b5d5c371295&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;__builtins__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;builtins&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;builtins&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面栗子中在第一次调用&lt;tt class="docutils literal"&gt;b&lt;/tt&gt;的时候报错&lt;tt class="docutils literal"&gt;NameError&lt;/tt&gt;，之后我们修改
builtins
的名字空间，将名字&lt;tt class="docutils literal"&gt;b&lt;/tt&gt;与值&lt;tt class="docutils literal"&gt;&amp;quot;builtins&amp;quot;&lt;/tt&gt;进行关联，就可以正常调用了。这种非常规用法不建议使用。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="legb"></category></entry><entry><title>Python 之 GIL</title><link href="http://www.sunisdown.me/python-zhi-gil.html" rel="alternate"></link><published>2015-02-03T00:00:00+08:00</published><author><name>Sunisdown</name></author><id>tag:www.sunisdown.me,2015-02-03:python-zhi-gil.html</id><summary type="html">&lt;p&gt;注: 本篇 Blog 是参照
&lt;a class="reference external" href="http://book.douban.com/subject/3117898/"&gt;Python源码剖析&lt;/a&gt;过的 Python 源
码,内容算是读书笔记吧,中间还不小心翻错了分支,翻到了3.4版本,不过看起来3.4的 GIL
处理要比2.7的优雅一些.总之,感谢陈孺大神&lt;/p&gt;
&lt;div class="section" id="gil"&gt;
&lt;h2&gt;什么是 GIL&lt;/h2&gt;
&lt;p&gt;GIL(Global Interpreter Lock)
是解释器全局锁,用来互斥线程对于Python虚拟机的使用.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;为什么用 GIL&lt;/h2&gt;
&lt;p&gt;我们知道 Python
的线程调度是由机器来调度的,在线程执行的时候,我们不能决定线程什么时候挂起.假设线程
A与线程 B 都保存在对象
Obj_1,而这种情况下有可能会发生一些比较坑的问题:比如 A 在销毁 Obj_1
的过程中被挂起,而这时候 B 线程开始执行销毁操作,而且正常的将
Obj_1的销毁,内存被回收.这时候B 被挂起,A 接着被挂起之前的状态执行.然后
Obj_1已经木有了...类似与这种坑爹的问题,没有 GIL 的情况下会经常发生.&lt;/p&gt;
&lt;p&gt;为了避免上述情况发生,我们就需要在解决多线程访问共享资源的互斥.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;创建 GIL&lt;/h2&gt;
&lt;p&gt;要了解在之前的Blog 中,大概的讲过 Python
中的线程调度是由操作系统来调度的.而 GIL
作为多线程操作的产物,要深入了解也必须要从线程&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Modules/threadmodule.c#L850"&gt;Thread&lt;/a&gt;模块入手.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyMethodDef&lt;/span&gt; &lt;span class="n"&gt;thread_methods&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start_new_thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_start_new_thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;start_new_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;start_new&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_start_new_thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;start_new_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;allocate_lock&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_allocate_lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocate_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;allocate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_allocate_lock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocate_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exit_thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_exit_thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_exit_thread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;interrupt_main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_PyThread_interrupt_main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interrupt_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get_ident&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;               &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_get_ident&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_ident_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread__count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;METH_NOARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_count_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stack_size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;thread_stack_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stack_size_doc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                      &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;           &lt;span class="cm"&gt;/* sentinel */&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从 Thread module我们可以看到Python
给我们提供的多线程机制的接口.非常简单,极其精简,类似于&lt;tt class="docutils literal"&gt;start_new_thread&lt;/tt&gt;跟&lt;tt class="docutils literal"&gt;start_new&lt;/tt&gt;都是同一个接口.&lt;/p&gt;
&lt;p&gt;从上面我们找到创建进程的接口,然后跟踪到&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Modules/threadmodule.c#L648"&gt;thread_PyThread_start_new_thread&lt;/a&gt;里面,官方的&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Modules/threadmodule.c#L687"&gt;注释&lt;/a&gt;写的也算到位.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;thread_PyThread_start_new_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;bootstate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;ident&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyArg_UnpackTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fargs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;start_new_thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyCallable_Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;first arg must be callable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyTuple_Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;2nd arg must be a tuple&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyDict_Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyExc_TypeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;optional 3rd arg must be a dictionary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;boot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyMem_NEW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;bootstate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;interp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyThreadState_GET&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;interp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;keyw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_PyThreadState_Prealloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;interp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tstate&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyMem_DEL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyErr_NoMemory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Py_XINCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;PyEval_InitThreads&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cm"&gt;/* Start the interpreter&amp;#39;s thread-awareness */&lt;/span&gt;
    &lt;span class="n"&gt;ident&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyThread_start_new_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t_bootstrap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ident&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_SetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ThreadError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;can&amp;#39;t start new thread&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Py_XDECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;PyThreadState_Clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;tstate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;PyMem_DEL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PyInt_FromLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ident&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Start the interpreter's &lt;span class="pre"&gt;thread-awareness&lt;/span&gt;&lt;/tt&gt;,让解释器开始准备多线程环境,其实就是初始化多线程环境.这里有一些需要注意的地方,Python
在最开始执行的时候,是&lt;strong&gt;没有创建多线程的数据结构的&lt;/strong&gt;,也没有创建
GIL.这样可以避免一些只需要单线程的程序做多余的线程调度.只有当我们执行&lt;tt class="docutils literal"&gt;start_new_thread&lt;/tt&gt;的时候,才会激活多线程机制,创建
GIL.&lt;/p&gt;
&lt;p&gt;我们跟踪&lt;tt class="docutils literal"&gt;PyEval_InitThreads()&lt;/tt&gt;到&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Python/ceval.c#L249"&gt;ceval.c&lt;/a&gt;,可以看到创建
GIL 的代码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
static PyThread_type_lock interpreter_lock = 0; /* This is the GIL */


PyEval_InitThreads(void)
{
    if (interpreter_lock)
        return;
    interpreter_lock = PyThread_allocate_lock();
    PyThread_acquire_lock(interpreter_lock, 1);
    main_thread = PyThread_get_thread_ident();
}
&lt;/pre&gt;
&lt;p&gt;从上面的代码中我们可以看到,在初始化多线程环境的时候,会检测
&lt;tt class="docutils literal"&gt;interpreter_lock&lt;/tt&gt;
是不是已经创建,如果没有创建,则会用&lt;tt class="docutils literal"&gt;PyThread_allocate_lock&lt;/tt&gt;
创建&lt;tt class="docutils literal"&gt;interpreter_lock&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;什么是 GIL&lt;/h2&gt;
&lt;p&gt;上面我们跟踪到 GIL 的创建过程,可是 GIL 到底是个什么东西?&lt;/p&gt;
&lt;p&gt;从前面的代码中,我们看到是由&lt;tt class="docutils literal"&gt;PyThread_allocate_lock&lt;/tt&gt;来创建GIL
的,而&lt;tt class="docutils literal"&gt;PyThread_allocate_lock&lt;/tt&gt;则是针对各个平台来做的具体实现,这里我们看&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Python/thread_pthread.h#L360"&gt;Posix标准&lt;/a&gt;的实现:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PyThread_allocate_lock(void)
{
    pthread_lock *lock;
    int status, error = 0;

    dprintf((&amp;quot;PyThread_allocate_lock called\n&amp;quot;));
    if (!initialized)
        PyThread_init_thread();

    lock = (pthread_lock *) malloc(sizeof(pthread_lock));
    if (lock) {
        memset((void *)lock, '\0', sizeof(pthread_lock));
        lock-&amp;gt;locked = 0;

        status = pthread_mutex_init(&amp;amp;lock-&amp;gt;mut,
                                    pthread_mutexattr_default);
        CHECK_STATUS(&amp;quot;pthread_mutex_init&amp;quot;);

        status = pthread_cond_init(&amp;amp;lock-&amp;gt;lock_released,
                                   pthread_condattr_default);
        CHECK_STATUS(&amp;quot;pthread_cond_init&amp;quot;);

        if (error) {
            free((void *)lock);
            lock = 0;
        }
    }

    dprintf((&amp;quot;PyThread_allocate_lock() -&amp;gt; %p\n&amp;quot;, lock));
    return (PyThread_type_lock) lock;
}
&lt;/pre&gt;
&lt;p&gt;先检测是否已经初始化,如果没有,则进行初始化.中间加上 malloc
机制,最后返回一个&lt;tt class="docutils literal"&gt;pthread_lock&lt;/tt&gt;,这就是我们的 GIL
了,&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Python/thread_pthread.h#L113"&gt;线程互斥的锁&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
typedef struct {
    char             locked; /* 0=unlocked, 1=locked */
    /* a &amp;lt;cond, mutex&amp;gt; pair to handle an acquire of a locked lock */
    pthread_cond_t   lock_released;
    pthread_mutex_t  mut;
} pthread_lock;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;什么时候释放 GIL&lt;/h2&gt;
&lt;p&gt;总算回到最初我写这篇 Blog
的动机上面来了,我是在去豆瓣面试的时候被问了这个问题,一时语塞,瞎扯一通之后回来决定要好好看一下代码的...
现在都已经快准备入职豆瓣了,才来动手写 Blog,也算是拖延症晚期吧.&lt;/p&gt;
&lt;p&gt;在通过 &lt;tt class="docutils literal"&gt;PyThread_allocate_lock&lt;/tt&gt; 创建 GIL
之后,多线程的开始正常的调度,包括&lt;tt class="docutils literal"&gt;sys.getcheckinterval()&lt;/tt&gt;
拿到的&lt;tt class="docutils literal"&gt;interval&lt;/tt&gt;(默认为100)的间隔被动放弃 GIL,或者线程阻塞放弃
GIL.总之,`PyEval_InitThreads
会通过&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Python/ceval.c#L254"&gt;PyThread_acquire_lock&lt;/a&gt;
来获取 GIL.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="GIL"></category></entry><entry><title>Python 元类</title><link href="http://www.sunisdown.me/python-yuan-lei.html" rel="alternate"></link><published>2014-12-29T00:00:00+08:00</published><author><name>Sunisdown</name></author><id>tag:www.sunisdown.me,2014-12-29:python-yuan-lei.html</id><summary type="html">&lt;p&gt;&lt;tt class="docutils literal"&gt;Python&lt;/tt&gt;中有三个概念比较难懂，分别是：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;装饰器&lt;/li&gt;
&lt;li&gt;描述符&lt;/li&gt;
&lt;li&gt;元类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三种概念里面，元类又最为难懂，威力最强。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;类型，类，对象&lt;/h2&gt;
&lt;p&gt;神说&lt;tt class="docutils literal"&gt;万物皆对象&lt;/tt&gt;，Python
中一切都是对象，凡是对象必先有类型。类，也是对象的一种。Python
中所有的对象都有一些相同的内容，包含在对象的&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Include/object.h#L106"&gt;头部信息&lt;/a&gt;中。&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PyObject_HEAD&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;在
&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Include/object.h#L78"&gt;PyObject&lt;/a&gt;
的定义中，&lt;tt class="docutils literal"&gt;ob_refcnt&lt;/tt&gt;
是&lt;tt class="docutils literal"&gt;应用计数&lt;/tt&gt;，用来做内存管理垃圾回收有关，这里暂时不细说。有兴趣的可以查看&lt;a class="reference external" href="https://github.com/qyuhen/book"&gt;Q.yuhen的
Python 笔记&lt;/a&gt;,&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="cm"&gt;/* PyObject_HEAD defines the initial segment of every PyObject. */&lt;/span&gt;
&lt;span class="cp"&gt;#define PyObject_HEAD                   \
    _PyObject_HEAD_EXTRA                \
    Py_ssize_t ob_refcnt;               \
    struct _typeobject *ob_type;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;ob_type&lt;/tt&gt;则是指向指向具体类型的指针。里面定义各种 Python
的类型。每一个对象都有他的类型。&lt;/p&gt;
&lt;p&gt;下面跟我念：Python
中万物皆对象，对象皆有类型，且类型也是一个对象。上面我们说了每一个对象都有一个&lt;tt class="docutils literal"&gt;类型指针&lt;/tt&gt;指向他的类型，我们可以通过类型指针来判断对象的类型。&lt;/p&gt;
&lt;p&gt;那么问题来了：我们通过什么来确定一个对象其实是一个类型对象？答案就是
&lt;tt class="docutils literal"&gt;metaclass&lt;/tt&gt;，所有 class 的 class，所有类型的类型。&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;pass&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;newdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;NewData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NewData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;newdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewData&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newdata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewData&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;NewData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__base__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;从上面的栗子中我们可以观察到，&lt;tt class="docutils literal"&gt;NewData&lt;/tt&gt;与&lt;tt class="docutils literal"&gt;type&lt;/tt&gt;以及&lt;tt class="docutils literal"&gt;object&lt;/tt&gt;的类型都是
&lt;em&gt;type&lt;/em&gt;，这 里面的类型 &lt;em&gt;type&lt;/em&gt; 就是
&lt;tt class="docutils literal"&gt;metaclass&lt;/tt&gt;的一种，现在理一下元类，类型，类，实例之间的关 系：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;实例的类型是类 newdata.&lt;strong&gt;class&lt;/strong&gt; == class&lt;/li&gt;
&lt;li&gt;类的类型是元类 NewData.&lt;strong&gt;class&lt;/strong&gt; == metaclass #type&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="metaclass"&gt;
&lt;h2&gt;&lt;strong&gt;metaclass&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Python 中 &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; 关键字会
&lt;a class="reference external" href="https://github.com/python/cpython/blob/2.7/Python/ceval.c#L4621"&gt;创建类的对象&lt;/a&gt;，
我们观察一下类的创建过程:&lt;/p&gt;
&lt;pre class="code c literal-block"&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyDict_Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyDict_GetItemString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__metaclass__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyTuple_Check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyTuple_GET_ITEM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PyObject_GetAttrString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__class__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PyErr_Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;metaclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ob_type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Py_INCREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;先检测在类的定义中是否指定了&lt;tt class="docutils literal"&gt;__metaclass__&lt;/tt&gt;，如果没有自己定义，则使用&lt;tt class="docutils literal"&gt;object&lt;/tt&gt;的
&lt;tt class="docutils literal"&gt;__class__&lt;/tt&gt;来作为元类，上面演示过&lt;tt class="docutils literal"&gt;object.__class__&lt;/tt&gt;
是&lt;tt class="docutils literal"&gt;type&lt;/tt&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;如何使用元类&lt;/h2&gt;
&lt;p&gt;上面一节讲到，如果自己没有定义&lt;tt class="docutils literal"&gt;__metaclass__&lt;/tt&gt;的时候，则会使用默认的元类&lt;tt class="docutils literal"&gt;type&lt;/tt&gt;。
而这一节则会实验如何自己创建一个自定义元类。假设我是一个非常自恋的码农，别人把我
的名字从 Auth
里面抹去这种事儿不能忍，这种情况下也可以蛋疼的用元类（这真的是一个
蛋疼的栗子）：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AuthMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SunisDown&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AuthMeta&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;aaa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;aaa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'SunisDown'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;如上所示，在后续的代码中，只要将__metaclass__ 指向
&lt;tt class="docutils literal"&gt;AuthMeta&lt;/tt&gt;，后面的类就有了属
性&lt;tt class="docutils literal"&gt;auth&lt;/tt&gt;，嗯，这个蛋疼的作者名字跟代码永远的绑到一起了。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;import this&lt;/tt&gt;的作者 Tim Peters
说过描述元类的话，能够非常到位的描述出元类在 Python 中的超然位置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
99%的用户不需要为元类这种黑魔法过渡操心.如果你想搞清楚究竟是否需要用到元类，那么你就不需要它。那些实际用到元类的人都非常 清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类。
&lt;/pre&gt;
&lt;p&gt;在 Django 的
&lt;a class="reference external" href="https://github.com/django/django/blob/master/django/db/models/base.py#L60"&gt;models&lt;/a&gt;
中，对于元类的使用可以算是一次教科书式的使用。&lt;/p&gt;
&lt;p&gt;通过继承&lt;tt class="docutils literal"&gt;models.Models&lt;/tt&gt;里面的元类，我们就可以直接写类似：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;这种简单方便的
API，用户可以直接使用，而后面负责的逻辑，就隐藏在元类之中。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>如何利用决策树来决定去不去年会</title><link href="http://www.sunisdown.me/ru-he-li-yong-jue-ce-shu-lai-jue-ding-qu-bu-qu-nian-hui.html" rel="alternate"></link><published>2014-11-06T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2014-11-06:ru-he-li-yong-jue-ce-shu-lai-jue-ding-qu-bu-qu-nian-hui.html</id><summary type="html">&lt;p&gt;又到一年年会时,吸引大家去年会的,要么是冲奖品去,要么是为了看表演的妹子,作为一个好青年我排除掉看妹子的选项,仅用奖品来做价值来决定&lt;strong&gt;到底年会值不值得去!!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们去年会的话,有可能得到一个
iMac,如果我们不去,那我们可能什么都得不到.但是
如果去年会,我们需要花路费,假设我们需要坐一次公交￥1,然后再坐一次地铁￥3,现在帝都公交地
铁都涨价了,出门的成本也增加了T
T.有的小伙伴可能会开车,这样路费比公共交通更贵.反正我没有车,一天的来回路费按￥8计算.&lt;/p&gt;
&lt;p&gt;通过上面的简单计算,如果我们去年会,则肯定需要支出￥8的成本,但是有可能会收获一台价
值￥8000的 iMac,看起来不错,即使没有抽到
iMac,其他的奖品也还是不错的~但是前提是你 人品要好.这是一个概率事件.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="26%" /&gt;
&lt;col width="26%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;抽奖顺序&lt;/th&gt;
&lt;th class="head"&gt;奖品级别&lt;/th&gt;
&lt;th class="head"&gt;价值￥&lt;/th&gt;
&lt;th class="head"&gt;人数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4等&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3等&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2等&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1等&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;特等&lt;/td&gt;
&lt;td&gt;8000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;特别幸运&lt;/td&gt;
&lt;td&gt;8000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当你对于一件事犹豫不决不知道该不该做的时候,决策树是帮你的好工具,下面我们利用决策树来帮助我们做一下决策.&lt;/p&gt;
&lt;p&gt;首先我们开始画一个决策树: 去或者不去,&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图片1" src="images/dt1.png" /&gt;
&lt;p class="caption"&gt;图片1&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;如果我们去了,开始了抽奖环节,估计大家都跟我一样,在开始的时候祈祷:不要不要不要抽
我,因为四等奖太小了.四等奖价值￥200,有40个四等奖,全公司有1200人,这样我们可以得出
抽中4等奖的概率为40/1200,然后￥200减去我们的成本￥8,预计收益为￥192.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 200-8
=192
&lt;/pre&gt;
&lt;p&gt;决策树如下:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图2" src="images/dt2.png" /&gt;
&lt;p class="caption"&gt;图2&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;如果没有抽中4等奖,后面还有机会竞争3等奖,由于前面有小伙伴得到了4等奖,所以我们获得3等奖的概率会增加,因为抽奖的时候会排除他们,重新计算,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 300 - 8
= 292
&lt;/pre&gt;
&lt;p&gt;得到如下决策树:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图3" src="images/dt3.png" /&gt;
&lt;p class="caption"&gt;图3&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;根据上面的计算方法,我们可以得到完整的决策树:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图4" src="images/dt4.png" /&gt;
&lt;p class="caption"&gt;图4&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当然,通常情况下为了尽兴,或者老板心情好,决定给一个特别将,嗯,再加一个特别奖:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图5" src="images/dt5.png" /&gt;
&lt;p class="caption"&gt;图5&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;上面的图中,我已经在决策树中分析了各种可能以及概率,下面我们要从末端反推决策树,确认每个分支的价值,然后做出判断:
特别奖的分支我们可以做出如下判断:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 1/1099*7992 + (1098/1099)*(-8)
=-0.72
&lt;/pre&gt;
&lt;p&gt;然后根据上面的计算简化决策树:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图6" src="images/dt6.png" /&gt;
&lt;p class="caption"&gt;图6&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;根据上面的简化方法一直计算,最终得到最简化的树:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="图7" src="images/dt7.png" /&gt;
&lt;p class="caption"&gt;图7&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;嗯,通过最终的简化图,我们可以看到,如果去年会,我们会有￥32.85
的收益,对我们是有好处的.So,还是去吧~&lt;/p&gt;
&lt;p&gt;当然,如果是周末开年会的话,计算的时候就需要再加上时间成本,小伙伴们自己来算吧:)&lt;/p&gt;
</summary></entry><entry><title>一致性哈希</title><link href="http://www.sunisdown.me/yi-zhi-xing-ha-xi.html" rel="alternate"></link><published>2014-11-06T00:00:00+08:00</published><author><name>Sunisdown</name></author><id>tag:www.sunisdown.me,2014-11-06:yi-zhi-xing-ha-xi.html</id><summary type="html">&lt;p&gt;&lt;em&gt;一致性哈希&lt;/em&gt;，顾名思义，是一种哈希算法。比较常用的哈希算法应该是取模，通常在数据库需要分库的时候，大家都会用取模哈希。但是取模有一个缺点，就是，就是增加或者删除一个槽位的时候，几乎需要对所有的关键字进行重新映射，而分库的时候用这种方法，则所有的数据都需要重新录入。&lt;/p&gt;
&lt;p&gt;在我们做分布式缓存的时候，我们需要把对 A 的请求，映射到某一个节点
node_a，如果是取模来做哈希，假设我们是资源
6，集群中有4个几点，取4的模为，则资源缓存到
node_2。如果我们向集群中添加一台设备，则需要取5的模，资源6会缓存到
node_1。实际上如果用取模来做哈希，无论是增加还是删除节点，都是灾难性的。大部分数据都需要重新映射，集群内的内容也需要重新缓存。这种情况下请求则会击穿缓存，请求到数据库，给数据库带来很大的压力。这种情况下，我们会需要&lt;strong&gt;一致性哈希&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://people.csail.mit.edu/karger/"&gt;David
Karger&lt;/a&gt;及其合作者列出了使得一致哈希在互联网分布式缓存中非常有用的几个特性：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;冗余少&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;过渡平滑&lt;/li&gt;
&lt;li&gt;存储均衡&lt;/li&gt;
&lt;li&gt;关键词单调&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一致性哈希最基础的想法是对所有的对象都使用相同的函数来映射缓存。这样可以尽可能的将同一个资源映射到同一个节点上面。这种情况下，无论是增加还是移出一个节点，都只会影响其相邻的节点，而其他的节点不受影响，这样最大程度的保证了缓存的有效性，将副作用降到了最低。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;详解&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;原理&lt;/h3&gt;
&lt;p&gt;一致性哈希梓潼来说非常简单，你可以认为这是一个从0到一个更大的数字构成的环。给你一个任意节点
A，通过一个 hash 函数，你可以将节点 A 放在环的某一个位置。如下图所示：&lt;/p&gt;
&lt;img alt="" src="images/hash_ring_1.png" /&gt;
&lt;p&gt;然后再给你一个对象&lt;tt class="docutils literal"&gt;15&lt;/tt&gt;，通过相同的 hash 函数对 &lt;tt class="docutils literal"&gt;15&lt;/tt&gt;
进行计算，则可以得到在环上得到相应的位置 key 15。&lt;/p&gt;
&lt;img alt="" src="images/hash_ring_2.png" /&gt;
&lt;p&gt;如上图所示，key 15被缓存到顺时针遇见的第一个节点，即
node20节点上。其他对象
key6，key23，key40则分别缓存到各自遇见的第一个节点，node10，node30，node40。一个节点缓存了自己与上一个节点之间的所有数据。
这种缓存方式下，如果节点20被删除，则 key15呗映射到 node30，如果
node30与与 node40之间增加了一个节点 node35，则
key31，key33都被重新映射到 node35，其他的对象映射不需要改变。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;虚拟节点&lt;/h3&gt;
&lt;p&gt;利用上面的方法可以说基本上已经足够了，但是有一个问题：我们对节点和对象进行哈希运算的时候，如果节点数过少，有可能会出现节点直接不均匀的情况出现。这样可能的大多数对象都映射到同一个节点上，如下图所示：&lt;/p&gt;
&lt;img alt="" src="images/hash_ring_4.png" /&gt;
&lt;p&gt;这样大部分数据都映射到
node40上，并不能够做到均衡，从而导致数据倾斜。为了解决这个问题，引入了&lt;tt class="docutils literal"&gt;虚拟节点&lt;/tt&gt;的机制。即新增同一个缓存设备的时候，会对这个设备进行多次哈希计算，从而产生多个节点。用上面的栗子，我们可以对每个节点进行三次哈希计算，环上则有9个节点&lt;tt class="docutils literal"&gt;20#1 #2 #3， 10#1 #2 #3， 40#1 #2 #3&lt;/tt&gt;：&lt;/p&gt;
&lt;img alt="" src="images/hash_ring_5.png" /&gt;
&lt;p&gt;在实际的生产环境中，我们可以对同一设备进行更多次哈希，这样数据分布会接近于平均分布。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python 实现&lt;/h2&gt;
&lt;p&gt;代码来做与 Python 的 hash_ring库：&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;md5&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HashRing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Manages a hash ring.

        `nodes` is a list of objects that have a proper __str__ representation.
        `replicas` indicates how many virtual points should be used pr. node,
        replicas are required to improve the distribution.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replicas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;replicas&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Adds a `node` to the hash ring (including a number of replicas).
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Removes `node` from the hash ring and its replicas.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a string key a corresponding node in the hash ring is returned.

        If the hash ring is empty, `None` is returned.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_key&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_node_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a string key a corresponding node in the hash ring is returned
        along with it's position in the ring.

        If the hash ring is empty, (`None`, `None`) is returned.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a string key it returns the nodes as a generator that can hold the key.

        The generator is never ending and iterates through the ring
        starting at the correct position.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_node_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;:]:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sorted_keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a string key it returns a long value,
        this long value represents a place on the hash ring.

        md5 is currently used because it mixes well.
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;long&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="Python"></category><category term="GIL"></category><category term="Hash"></category></entry><entry><title>Emacs 速查手册</title><link href="http://www.sunisdown.me/emacs-su-cha-shou-ce.html" rel="alternate"></link><published>2014-10-24T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2014-10-24:emacs-su-cha-shou-ce.html</id><summary type="html">&lt;p&gt;&lt;em&gt;注：&lt;/em&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
本文是从 Emacs 官方文档 的 help-with-tutorial中文版摘抄而来的速查手册，译者名单见文章末尾
&lt;/pre&gt;
&lt;p&gt;重要提示：要退出 Emacs，请用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-x&lt;/span&gt; &lt;span class="pre"&gt;C-c&lt;/span&gt;&lt;/tt&gt;（两个连续的组合键）。
要退出一个正在运行中的命令，请用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-g&lt;/span&gt;&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;以下命令在翻页浏览时相当有用：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-v     向前移动一屏
M-v     向后移动一屏
C-l     重绘屏幕，并将光标所在行置于屏幕的中央
        （注意是 CONTROL-L，不是 CONTROL-1）
&lt;/pre&gt;
&lt;div class="section" id="basic-cursor-control"&gt;
&lt;h2&gt;基本的光标控制（BASIC CURSOR CONTROL）&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
                     上一行 C-p
                          :
                          :
    向左移 C-b .... 目前光标位置 .... 向右移 C-f
                          :
                          :
                     下一行 C-n


C-f     向右移动一个字符
C-b     向左移动一个字符

M-f     向右移动一个词【对中文是移动到下一个标点符号】
M-b     向左移动一个词【对中文是移动到上一个标点符号】

C-n     移动到下一行
C-p     移动到上一行

C-a     移动到行首
C-e     移动到行尾

M-a     移动到句首
M-e     移动到句尾

M-&amp;lt;     移动到文件开始
M-&amp;gt;     移动到文件结束
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;注意:&lt;/em&gt;在大部分键盘上，小于号（&amp;lt;）需要用上档键（Shift）来输入，所以在这
些键盘上你应该用 Shift 键来输入 M-&amp;lt;，如果不按 Shift 键，你输入的会是
M-comma（META 逗号）。&lt;/p&gt;
&lt;p&gt;大部分的 Emacs 命令接受数字参数，并且对于多数命令而言，这些数字参数的
作用是指定命令的重复次数。为一个命令指定数字参数（也就是重复次数）的方
法是：先输入
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-u&lt;/span&gt;&lt;/tt&gt;，然后输入数字作为参数，最后再输入命令。如果你有META （或 EDIT
或 ALT）键，那么还有另一种办法：按住 META 键不放，然后输入数字。 不
过我们还是建议你用
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-u&lt;/span&gt;&lt;/tt&gt;，因为它在任何终端机上都能用。这种数字参数也称为
“前缀参数”，意思是说这个参数是先于使用它的命令而输入的。&lt;/p&gt;
&lt;p&gt;举例来说， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-u&lt;/span&gt; 8 &lt;span class="pre"&gt;C-f&lt;/span&gt;&lt;/tt&gt; 会向前移动 8 个字符。&lt;/p&gt;
&lt;p&gt;虽然大部分命令把数字参数解释为其重复次数，但是也有些命令例外，它们将数
字参数另做它用。比如有些命令（我们目前还没学到）仅仅将前缀参数作为一个
标志――只要给出有一个前缀参数，不管其值为何，它都会改变命令的功能。&lt;/p&gt;
&lt;p&gt;而&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-v&lt;/span&gt;&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-v&lt;/span&gt;&lt;/tt&gt;
则属于另一种类型的例外。当给定一个参数时，它们将滚动你指
定的“行数”，而不是“屏数”。举例来说，&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-u&lt;/span&gt; 8 &lt;span class="pre"&gt;C-v&lt;/span&gt;&lt;/tt&gt;将文本向下滚动 8
行。&lt;/p&gt;
&lt;p&gt;这个命令应该已经将文字向上滚动了 8 行。如果你想将它再次地向下滚动，你
可以给定一个参数然后执行 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;M-v&lt;/span&gt;&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;如果你正在使用图形界面，比如 X 或者微软的 Windows，那么在 Emacs窗
口的一边应该有一个长方形的区域叫“滚动条”。你可以用鼠标操纵滚动条来滚动
文字。&lt;/p&gt;
&lt;p&gt;如果你的鼠标有滚轮的话，你也可以使用滚轮来滚动。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inserting-and-deleting"&gt;
&lt;h2&gt;插入与删除（INSERTING AND DELETING）&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;DEL&amp;gt;        删除光标前的一个字符
C-d          删除光标后的一个字符

M-&amp;lt;DEL&amp;gt;      移除光标前的一个词
M-d          移除光标后的一个词

C-k          移除从光标到“行尾”间的字符
M-k          移除从光标到“句尾”间的字符

C-y          粘贴上一次（有且只有一次）
M-y  粘贴（一个循环，会往前递归之前移除的内容）
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="undo"&gt;
&lt;h2&gt;撤销（UNDO）&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
C-/
C-_
C-x u ##本人测试没有效果
&lt;/pre&gt;
&lt;p&gt;如果你修改了一段文字，又觉得改得不好，可以用 undo 命令进行撤销：C-/。&lt;/p&gt;
&lt;p&gt;通常 C-/ 会消除一个命令所造成的所有改变；如果你在一行中连续多次地使用
C-/，你会把以前的命令也依次撤销。&lt;/p&gt;
&lt;p&gt;但是有两个例外： 1）
没有改变文字的命令不算（包括光标移动命令和滚动命令） 2）
从键盘输入的字符以组为单位――每组最多 20 个字符――来进行处理。
（这是为了减少你在撤销“插入文字”动作时需要输入 C-/ 的次数）&lt;/p&gt;
&lt;p&gt;C-_ 也是撤销命令；它的作用跟 C-/ 一样，但是它比较容易多次输入。在
某些终端上，输入 C-/ 实际上向 Emacs 发送的是 C-_ 。 另外， C-x u 和 C-/
完全一样，但是按起来有些麻烦。&lt;/p&gt;
&lt;p&gt;数字参数对于 C-/ 、 C-_ 和 C-x u 的意义是执行撤销的重复次数。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="searching"&gt;
&lt;h2&gt;搜索（SEARCHING）&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
C-s 向后搜索
C-r 向前搜索
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="emacs-if-emacs-stops-responding"&gt;
&lt;h2&gt;如果 EMACS 失去响应（IF EMACS STOPS RESPONDING）&lt;/h2&gt;
&lt;p&gt;如果 Emacs 对你的命令失去响应，你可以用 C-g 来安全地终止这条命令。C-g
也可以终止一条执行过久的命令。&lt;/p&gt;
&lt;p&gt;C-g 还可以取消数字参数和只输入到一半的命令。&lt;/p&gt;
&lt;p&gt;如果你不小心按了一下 ，你也可以用 C-g 来取消它。
【这个说法似乎有问题，因为按照这个按键顺序输入的应该是 C-M-g。 取消
的正确做法是再连按两次 。】&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="disabled-commands"&gt;
&lt;h2&gt;被禁用的命令（DISABLED COMMANDS）&lt;/h2&gt;
&lt;p&gt;有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误
用而造成麻烦。&lt;/p&gt;
&lt;p&gt;如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令
到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。&lt;/p&gt;
&lt;p&gt;如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如 果
你不想用，就按“n”。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 试试 C-x C-l （这是一个被禁用的命令）
   然后用 n 来回答询问。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="windows"&gt;
&lt;h2&gt;窗格（WINDOWS）&lt;/h2&gt;
&lt;p&gt;Emacs 可以有多个“窗格”，每个窗格显示不同的文字。后面会介绍怎么对付多个窗
格，现在我们先学会如何关掉多余的窗格。其实也很简单：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-x 1   只保留一个窗格（也就是关掉其它所有窗格）。
&lt;/pre&gt;
&lt;p&gt;也就是先按 CONTROL-x 然后再按 1。C-x 1 会保留光标所在的窗格，并将其扩大
到整个屏幕，同时关掉所有其它的窗格。&lt;/p&gt;
&lt;p&gt;有一系列命令是以 CONTROL-x 开始的，这些命令许多都跟“窗格、文件、缓冲区
【缓冲区（buffer）会在后文详细介绍】”等等诸如此类的东西有关，其中有些
命令可能包含了 2 个、3 个或者 4 个字符。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="file"&gt;
&lt;h2&gt;文件（FILE）&lt;/h2&gt;
&lt;p&gt;想保存工作成果就要记得存盘，否则一旦退出 Emacs 你编辑的文字就会丢失。
要存盘，就要在编辑前“寻找”到一个存盘文件。（这个过程通常也被称为“访问”
文件。）&lt;/p&gt;
&lt;p&gt;寻找到一个文件意味着你可以在 Emacs 里查看这个文件的内容。从许多角度看，
这就等于你在直接编辑这个文件，只是你所做的修改只有在“存盘”的时候才会
被写入文件。也正因为如此，你可以丢弃一个写到一半的文件而不必把这个残缺
文件也保存到计算机上。在存盘的时候，Emacs 会把存盘前的文件重命名保存，
以防你改完之后又想反悔。&lt;/p&gt;
&lt;p&gt;寻找文件的命令有一个特点，那就是你必须给出文件名。我们称这个命令“读入
了一个参数”（在这里，这个参数显然就是文件名）。在你输入这条命令之后：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-x C-f   寻找一个文件
&lt;/pre&gt;
&lt;p&gt;Emacs 会提示你输入文件名。你输入的文件名会出现在屏幕最底端的一行，这一
行被称为小缓冲（minibuffer），在小缓冲里你可以使用通常的 Emacs 编辑命
令来编辑文件名。&lt;/p&gt;
&lt;p&gt;在小缓冲里输入文件名（其实输入其它东西也一样）时可以用 C-g 取消。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 C-x C-f，然后输入 C-g
   这会关掉小缓冲，同时也会取消使用小缓冲的 C-x C-f 命令。
   当然了，你也没有找任何文件。
&lt;/pre&gt;
&lt;p&gt;用 结束文件名的输入。之后，小缓冲会消失，C-x C-f 将会去寻找你
指定的文件。小缓冲在 C-x C-f 命令结束之后也会消失。&lt;/p&gt;
&lt;p&gt;文件被显示在了屏幕上，你可以开始编辑了。存盘用这条命令：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-x C-s   储存这个文件
&lt;/pre&gt;
&lt;p&gt;这条命令把 Emacs 中的文字存储到文件中。第一次存盘的时候 Emacs 会将原文
件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。
【对许多人来说，这是一个烦人的特性，关掉文件备份可以用如下命令： M-x
customize-variable make-backup-files 】&lt;/p&gt;
&lt;p&gt;存盘结束后，Emacs 会显示写入文件的文件名。你最好养成经常存盘的习惯，这
可以减少系统崩溃和死机给你带来的损失（也可参见下面的“自动保存”一节）。&lt;/p&gt;
&lt;p&gt;你不但可以寻找一个已有的文件来查看或编辑，还可以寻找一个不存在的文件。
实际上这正是 Emacs 创建新文件的方法：找到不存在的新文件。事实上，只有
在存盘的时候，Emacs 才会真正创建这个文件。而在这之后的一切就跟编辑一个
已有文件没有区别了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="buffer"&gt;
&lt;h2&gt;缓冲区（BUFFER）&lt;/h2&gt;
&lt;p&gt;你可以用 C-x C-f 找到并打开第二个文件，但第一个文件仍然在 Emacs 中。要
切回第一个文件，一种办法是再用一次 C-x C-f。这样，你就可以在 Emacs 中
同时打开多个文件。&lt;/p&gt;
&lt;p&gt;Emacs 把每个编辑中的文件都放在一个称为“缓冲区（buffer）”的地方。每寻
找到一个文件，Emacs 就在其内部开辟一个缓冲区。用下面的命令可以列出当前
所有的缓冲区：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-x C-b   列出缓冲区
C-x s   保存多个缓冲区
&lt;/pre&gt;
&lt;p&gt;C-x s 会找出所有已被修改但尚未存盘的缓冲区，然后向你逐个询问：是否需要
存盘？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extending-the-command-set"&gt;
&lt;h2&gt;命令集扩展（EXTENDING THE COMMAND SET）&lt;/h2&gt;
&lt;p&gt;Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 CONTROL 和 META
组合键上显然是不可能的。Emacs 用扩展（eXtend）命令来解决这个问题，扩展
命令有两种风格：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。
M-x     命令名扩展。M-x 之后输入一个命令名。
&lt;/pre&gt;
&lt;p&gt;很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常
用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s
保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。（不用担心退出 Emacs
会给你带来什么损失，Emacs 会在退出之前提醒你存盘的。）&lt;/p&gt;
&lt;p&gt;如果你使用图形界面，你不需要任何特殊的命令来切换 Emacs 和其他应用程序。
你可以使用鼠标或者窗口管理器的命令。然而，如果你使用只能同时显示一个应
用程序的文本终端，你需要“挂起” Emacs ，以切换到其他的应用程序。&lt;/p&gt;
&lt;p&gt;C-z 可以暂时离开 Emacs――当然，你还可以再回来。在允许 C-z 的系统中，C-z
会把 Emacs“挂起”，也就是说，它会回到 shell但不杀死 Emacs 的进程。在常
用的 shell 中，通常可以用“fg”或者“%emacs”命令再次回到 Emacs 中。&lt;/p&gt;
&lt;p&gt;你最好在打算退出登陆的时候再用 C-x C-c。在把 Emacs 当做一个临时的编辑
器的时候（比如被一个邮件处理程序调用），也可以用 C-x C-c 退出。&lt;/p&gt;
&lt;p&gt;C-x 的扩展命令有很多，下面列出的是你已经学过的：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-x C-f         寻找文件。
C-x C-s         保存文件。
C-x C-b         列出缓冲区。
C-x C-c         离开 Emacs。
C-x 1           关掉其它所有窗格，只保留一个。
C-x u           撤销。
&lt;/pre&gt;
&lt;p&gt;用命令名扩展的命令通常并不常用，或只用在部分模式下。比如
replace-string（字符串替换）这个命令，它会把一个字符串替换成另一个。在
输入 M-x 之后，Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想
输入“replace-string”，其实只需要敲“repl s”就行了，Emacs 会帮你自
动补齐。输入完之后按 提交。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="auto-save"&gt;
&lt;h2&gt;自动保存（AUTO SAVE）&lt;/h2&gt;
&lt;p&gt;如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你
所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编
辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个
“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫
“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。&lt;/p&gt;
&lt;p&gt;所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保
存文件）然后输入 M-x recover file 来恢复你的自动保存文件。在
提示确认的时候，输入 yes。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="echo-area"&gt;
&lt;h2&gt;回显区（ECHO AREA）&lt;/h2&gt;
&lt;p&gt;如果 Emacs 发现你输入多字符命令的节奏很慢，它会在窗格的下方称为“回显区”
的地方给你提示。回显区位于屏幕的最下面一行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mode-line"&gt;
&lt;h2&gt;状态栏（MODE LINE）&lt;/h2&gt;
&lt;p&gt;位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-:**- TUTORIAL.cn 63% L749 (Fundamental)
&lt;/pre&gt;
&lt;p&gt;状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。&lt;/p&gt;
&lt;p&gt;你应该知道文件名的意思吧？就是你找到的那个文件嘛。-NN%-- 显示的是光标
在全文中的位置。如果位于文件的开头，那么就显示 --Top-- 而不是 --00%--；
如果位于文件的末尾，就显示
--Bot--。如果文件很小，一屏就足以显示全部内容， 那么状态栏会显示
--All--。&lt;/p&gt;
&lt;p&gt;“L” 和其后的数字给出了光标所在行的行号。&lt;/p&gt;
&lt;p&gt;最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改
动过，所以状态栏上显示的不是星号而是短线（-）。&lt;/p&gt;
&lt;p&gt;状态栏上小括号里的内容告诉你当前正在使用的编辑模式。缺省的模式是
Fundamental，就是你现在正在使用的这个。它是一种“主模式”。&lt;/p&gt;
&lt;p&gt;Emacs 的主模式林林总总。有用来编辑程序代码的――比如 Lisp 模式；也有用
来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模
式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。&lt;/p&gt;
&lt;p&gt;主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你
都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不
同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可
以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental
模式。&lt;/p&gt;
&lt;p&gt;编辑自然语言文本――比如现在――应该用 Text 模式。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 M-x text-mode &amp;lt;Return&amp;gt;。
&lt;/pre&gt;
&lt;p&gt;别担心，什么都没变。不过细心一些可以发现，M-f 和 M-b 现在把单引号（'）
视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号
视为分隔单词的符号。&lt;/p&gt;
&lt;p&gt;主模式通常都会搞一些类似的小动作，因为很多命令其实完成的是“相同的工
作”，只是在不同环境下会有不同的工作方式而已。【所谓“求同存异”，在 Emacs
里得到了很好的体现】&lt;/p&gt;
&lt;p&gt;用 C-h m 可以查看当前主模式的文档。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 把光标移动到下一行。
&amp;gt;&amp;gt; 用 C-l C-l 将本行带到屏幕的最上方。
&amp;gt;&amp;gt; 输入 C-h m，看看 Text 模式与 Fundamental 模式有哪些不同。
&amp;gt;&amp;gt; 输入 C-x 1 关掉文档窗格。
&lt;/pre&gt;
&lt;p&gt;主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minor
mode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式
都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不
使用辅模式，也可以只使用一个或同时使用多个辅模式。&lt;/p&gt;
&lt;p&gt;有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文 本
的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。&lt;/p&gt;
&lt;p&gt;用 M-x auto-fill-mode 启动自动折行模式。再用一次这条命令，自
动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开
启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来
“开关（toggle）”模式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-windows"&gt;
&lt;h2&gt;多窗格（MULTIPLE WINDOWS）&lt;/h2&gt;
&lt;p&gt;Emacs 的迷人之处很多，能够在屏幕上同时显示多个窗格就是其中之一。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 移动光标到这一行，然后输入 C-l C-l。

&amp;gt;&amp;gt; 现在输入 C-x 2，它会将屏幕划分成两个窗格。
   这两个窗格里显示的都是本篇快速指南，而光标则停留在上方的窗格里。

&amp;gt;&amp;gt; 试试用 C-M-v 滚动下方的窗格。
   （如果你并没有 META 键，用 ESC C-v 也可以。）
   【向上滚动是 C-M-S-v，也就是同时按住 CONTROL、META 和 SHIFT 再按 v】

&amp;gt;&amp;gt; 输入 C-x o（“o”指的是“其它（other）”），
   将光标转移到下方的窗格。

&amp;gt;&amp;gt; 在下方的窗格中，用 C-v 和 M-v 来滚动。
   同时继续在上方的窗格里阅读这些指导。

&amp;gt;&amp;gt; 再输入 C-x o 将光标移回到上方的窗格里。
   光标会回到它在上方窗格中原本所在的位置。
&lt;/pre&gt;
&lt;p&gt;连续使用 C-x o 可以遍历所有窗格。“被选中的窗格”，也就是绝大多数的编辑
操作所发生的地方，是在你不打字时闪烁光标的那个窗格。其他的窗格有它们自
己的光标位置； 如果你在图形界面下运行 Emacs ，这些光标是镂空的长方形。&lt;/p&gt;
&lt;p&gt;当你在一个窗格中编辑，但用另一个窗格作为参考的时候，C-M-v 是很有用的命
令。无需离开被选中的窗格，你就可以用 C-M-v 命令滚动另外一个窗格中的文
字。【比如翻译和校对就很适合用这种方式进行。】&lt;/p&gt;
&lt;p&gt;C-M-v 是一个 CONTROL-META 组合键。如果你有 META （或 Alt）键的话，可以
同时按住CONTROL 和 META 键并输入 v。CONTROL 和 META 键先按哪个都可以，
因为它们只是用来“修饰（modify）”你输入的字符的。&lt;/p&gt;
&lt;p&gt;如果你并没有 META 键，你也可以用 ESC 来代替，不过这样的话就要注意按键 顺
序了：你必须先输入 ESC ，然后再输入 CONTROL-v。CONTROL-ESC v 是没用的，
因为 ESC 本身是一个字符键，而不是一个修饰键（modifier key）。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; （在上方窗格里）输入 C-x 1 关掉下方窗格。
&lt;/pre&gt;
&lt;p&gt;（如果你在下方的窗格里输入 C-x 1，那么就会关掉上方的窗格。你可以把这个
命令看成是“只保留一个窗格”――就是我们正在编辑的这个。）&lt;/p&gt;
&lt;p&gt;不同的窗格可以显示不同的缓冲区。如果你在一个窗格里用 C-x C-f 打开了一 个
文件，另一个窗格并不会发生什么变化。任何一个窗格里都可以用来打开文件。&lt;/p&gt;
&lt;p&gt;用下面的方法可以在一个新开窗格里打开文件：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 C-x 4 C-f，紧跟着输入一个文件名，再用 &amp;lt;Return&amp;gt; 结束。
   可以看到你指定的文件出现在下方的窗格中，同时光标也跳到了那里。

&amp;gt;&amp;gt; 输入 C-x o 回到上方的窗格，然后再用 C-x 1 关掉下方窗格。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-frames"&gt;
&lt;h2&gt;多窗口（MULTIPLE FRAMES）&lt;/h2&gt;
&lt;p&gt;Emacs 可以创建多个窗口。窗口由许多窗格以及菜单、滚动条、回显区等组成。
在图形界面下，多个窗口可以同时显示出来。在文本终端中，只能同时显示一个
窗口。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 M-x make-frame &amp;lt;Return&amp;gt;。
 可以看到一个新的窗口出现在了你的屏幕上。
&lt;/pre&gt;
&lt;p&gt;你可以在新的窗口里做最初的窗口里可以做的任何事情。第一个窗口没有什么特
别的。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 M-x delete-frame &amp;lt;Return&amp;gt;.
 这个命令将会关闭选中的窗口。
&lt;/pre&gt;
&lt;p&gt;你也可以通过图形系统来关闭某个窗口（通常是在窗口上面的某个角落里的一个
“X”按钮）。如果你关闭的是 Emacs 进程的最后一个窗口， Emacs 将会退出。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recursive-editing-levels"&gt;
&lt;h2&gt;递归编辑（RECURSIVE EDITING LEVELS）&lt;/h2&gt;
&lt;p&gt;有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指
示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到
[(Fundamental)]，而不是 (Fundamental)。【比如在用 M-% 进行交互式替换的
时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模
式， 这就是所谓的递归编辑。】&lt;/p&gt;
&lt;p&gt;离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可
以使用它来关掉多余的窗格，或者离开小缓冲。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 M-x 进入小缓冲；然后输入 ESC ESC ESC 离开。
&lt;/pre&gt;
&lt;p&gt;你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的
命令和其参数（arguments）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-more-help"&gt;
&lt;h2&gt;获得更多帮助（GETTING MORE HELP）&lt;/h2&gt;
&lt;p&gt;本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水，不至于束手无策望洋 兴
叹。有关 Emacs 的话题可谓汗牛充栋，这里自然是难尽万一。不过 Emacs 很理
解你求知若渴的心情，因为它提供的强大功能实在是太多了。为此，Emacs 提供
了一些命令来查看 Emacs 的命令文档，这些命令都以 CONTROL-h 开头，这个字
符也因此被称为“帮助（Help）字符”。&lt;/p&gt;
&lt;p&gt;要使用帮助（Help）功能，请先输入 C-h，然后再输入一个字符以说明你需要什
么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入 C-h ?，Emacs
会告诉你它能提供了哪些帮助。如果你按了 C-h 又想反悔，可以用 C-g 取消。&lt;/p&gt;
&lt;p&gt;（如果你按 C-h 之后没有任何帮助信息显示出来，那么试试 F1 键或者 M-x help
。）&lt;/p&gt;
&lt;p&gt;最基本的帮助功能是 C-h c。输入 C-h c 之后再输入一个组合键，Emacs 会给 出
这个命令的简要说明。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 C-h c C-p。
&lt;/pre&gt;
&lt;p&gt;显示的消息应该会是这样：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-p runs the command previous-line
&lt;/pre&gt;
&lt;p&gt;这条消息显示了 C-p 命令对应的函数名。命令的功能由函数完成，所以函数名
本身也可以被看成是最简单的文档――至少对于你已经学过的命令来说，它们的函
数名足以解释它们的功能了。&lt;/p&gt;
&lt;p&gt;多字符命令一样可以用 C-h c 来查看。&lt;/p&gt;
&lt;p&gt;想得到更多的信息，请把 C-h c 换成 C-h k 试试看。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 输入 C-h k C-p。
&lt;/pre&gt;
&lt;p&gt;上面的命令会新打开一个 Emacs 窗格以显示函数的名称及其文档。你读完之后 可
以用 C-x 1 关掉这个帮助窗格。当然你并不需要立即这样做，你完全可以先在 编
辑窗格里做点别的事情，然后再关掉帮助窗格。&lt;/p&gt;
&lt;p&gt;还有一些其它有用的 C-h 命令：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C-h f        解释一个函数。需要输入函数名。
&lt;/pre&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 试试看，输入 C-h f previous-line &amp;lt;Return&amp;gt;。
   Emacs 会给出它所知道的所有有关“实现 C-p 命令功能的函数”的信息。
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
    C-h v 用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行
为”。同样，你需要输入变量的名称。

    C-h a        相关命令搜索（Command Apropos）。
                输入一个关键词然后 Emacs 会列出所有命令名中包含此关键
                词
                的命令。这些命令全都可以用 M-x 来启动。对于某些命令来
                说，
                相关命令搜索还会列出一两个组合键。
&lt;/pre&gt;
&lt;p&gt;Emacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中 含
有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”
这样的命令名的旁边。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt; 用 C-M-v 来回滚动 help 窗格，多试几次。

&amp;gt;&amp;gt; 输入 C-x 1 来删除 help 窗格。

   C-h i        阅读手册（也就是通常讲的 Info）。
                这个命令会打开一个称为“*info*”的特殊缓冲区，在那里，
                你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的
                使
                用手册，按 m emacs &amp;lt;Return&amp;gt; 就可以了。如果你之前从没用
                过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使
                用指南。在看完本快速指南之后，Emacs Info 会成为你的主
                要
                参考文档。
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="translation"&gt;
&lt;h2&gt;翻译（TRANSLATION）&lt;/h2&gt;
&lt;p&gt;翻译：孙一江 &lt;a class="reference external" href="mailto:sunyijiang&amp;#64;gmail.com"&gt;sunyijiang&amp;#64;gmail.com&lt;/a&gt; 维护：薛富侨 &lt;a class="reference external" href="mailto:xfq.free&amp;#64;gmail.com"&gt;xfq.free&amp;#64;gmail.com&lt;/a&gt;
校对：水木社区（www.newsmth.net）Emacs 板众多网友及众多 Emacs 中文用户&lt;/p&gt;
&lt;p&gt;下面列出主要术语的译词对照，并给出注释说明：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
command               命令
cursor                光标
scrolling             滚动
numeric argument      数字参数
window                窗格 [1]
insert                插入
delete                删除 [2]
kill                  移除 [2]
yank                  召回 [2]
undo                  撤销
file                  文件
buffer                缓冲区
minibuffer            小缓冲
echo area             回显区
mode line             状态栏
search                搜索
incremental search    渐进式搜索 [3]
&lt;/pre&gt;
&lt;p&gt;对于其他没有提到的术语，读者可以参考 Emacs 使用手册里的术语表。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[1] “window”一词在计算机相关的领域一般都被译为“窗口”。但是在 Emacs
    中，还有一个“frame”的概念。在被广泛使用的 X 窗口系统和微软的视窗
    （Windows）系列操作系统中，Emacs 的一个“frame”就是一个“窗口”，因
    此把 Emacs 中的“frame”译成“窗口”更加符合通常的习惯。这样，Emacs
    中的“window”就只能译成“窗格”了。我们认为 Emacs 中 window 和
    frame 的关系用窗格和窗口来类比是十分形象的。

    《学习GNU Emacs》（第二版）一书对“window”和“frame”的翻译与本教程
    刚好相反（分别译作“窗口”和“窗格”）。在此特别注明，以消除可能产生
    的疑惑。（感谢李旭章 &amp;lt;lixuzhang&amp;#64;gmail.com&amp;gt; 指出）

[2] 对于“delete”和“kill”的区别，正文已经给出了详细的说明。“删除”和
    “移除”相比较起来，前者更多地隐含着“破坏”和“不可恢复”的意思，而
    后者更多地隐含着“被转移”和“可恢复”的意思。因此分别选择它们作为上
    述两词的译词，希望能够体现出区别。“yank”在中文文档中鲜有对应译词出
    现，翻译的困难较大。究其本意是：“a strong sudden pull”（参见韦氏词
    典），即“猛然拉回”。在原文档中 yank 被引申为“将先前移除的东西再移
    回来”这个意思，所以我们选择了“召回”一词与其对应。

[3] “incremental”一词在计算机著作中广泛出现，被广泛接受的中文译词有两
    个：“增量的”和“渐进的”。“incremental search”翻译成“增量式搜索
    ”或者“渐进式搜索”都讲得通，且都有各自的形象之处。还是参考原文对其
    的解释：“... means that the search happens while you type in the
    string to search for”。意思是之所以称其为“incremental search”，是
    因为“在你输入搜索字符串的过程中，搜索就已经在进行了”。我们认为“增
    量的”更加强调在现有基础上的变化（比如“增量备份”，“增量编译”）；
    而“渐进的”更加强调过程的逐渐发展，也更加符合原文的意思。因此我们选
    择将“incremental search”译作“渐进式搜索”。
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="emacs"></category></entry><entry><title>Unix/Linux终端下代理快速设置</title><link href="http://www.sunisdown.me/unixlinuxzhong-duan-xia-dai-li-kuai-su-she-zhi.html" rel="alternate"></link><published>2014-10-22T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2014-10-22:unixlinuxzhong-duan-xia-dai-li-kuai-su-she-zhi.html</id><summary type="html">&lt;p&gt;最近开始从 Vim 往 Emacs，这是一个痛苦的过程，不过好在有
evil-mode，让这个迁移的过程不至于夭折。别问我为什么要背叛 Vim 。&lt;/p&gt;
&lt;p&gt;像我这种 Emacs 新手难免会需要下载插件，而下载插件就需要FUCK GFW。笨笨用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://host:port emacs -nw
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方法来启动 emacs，简直要哭晕在地上。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;设置方法&lt;/h2&gt;
&lt;p&gt;所以在配置文件中加了下面的代码，方便在终端下控制当前环境变量下FUCK GFW：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; proxy_on&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;no_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost,127.0.0.1,localaddress,.localdomain.com&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;http_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://host:port&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;https_proxy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$http_proxy&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Proxy environment variable set.&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; proxy_off&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;unset&lt;/span&gt; http_proxy
    &lt;span class="nb"&gt;unset&lt;/span&gt; https_proxy
    &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;Proxy environment variable removed.&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将上面代码加到你的&lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt;中，然后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;zsh 用户请将上面命令中的&lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt;替换成&lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt;，然后在终端下就可以快
速设置代理的启动与关闭了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#启动代理&lt;/span&gt;
$ proxy_on
Proxy environment variable set.

&lt;span class="c1"&gt;#关闭代理&lt;/span&gt;
$ proxy_off
Proxy environment variable removed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;友情提示&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;友情提示，请将 http://host:port 替换成自己的代理地址
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="linux"></category><category term="unix"></category><category term="proxy"></category></entry><entry><title>白话Python 进程，线程，协程</title><link href="http://www.sunisdown.me/bai-hua-python-jin-cheng-xian-cheng-xie-cheng.html" rel="alternate"></link><published>2014-10-19T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2014-10-19:bai-hua-python-jin-cheng-xian-cheng-xie-cheng.html</id><summary type="html">&lt;p&gt;Python被人诟病最多的大概就是性能差，在这里讲一下 Python
的多进程，多线程与协程。首先声明这不是教程，看完这篇文章，大概能够对
Python 的多进程与多线程有一定的了解。&lt;/p&gt;
&lt;img alt="" src="images/process_thread.png" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;进程&lt;/h2&gt;
&lt;p&gt;进程是正则执行的程序实例。执行程序的过程中，内核会讲程序代码载入虚拟内存，喂程序变量分配空间，建立bookkeeping 数据结构，来记录与进程有关的信息，比如进程 ID，用户 ID 等&lt;/p&gt;
&lt;p&gt;创建进程的时候，内核会为进程分配一定的资源，并在进程存活的时候不断进行调整，比如内存，进程创建的时候会占有一部分内存。进程结束的时候资源会释放出来，来让其他资源使用。&lt;/p&gt;
&lt;p&gt;我们可以把进程理解为一种容器，容器内的资源可多可少，但是在容器内的程序只能使用容器内的东西。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;线程&lt;/h2&gt;
&lt;p&gt;UNIX
中，一个进程中可以执行多个线程。多个线程共享进程内的资源。所以可以将线程可以看成是共享同一虚拟内存以及其他属性的进程。&lt;/p&gt;
&lt;p&gt;线程相对于进程的优势在于同一进程下的不同线程之间的数据共享更加容易。&lt;/p&gt;
&lt;p&gt;Python被诟病最多的大概就是解释器全局锁（GIL）了，GIL 的存在是为了实现Python 中对于共享资源访问的互斥。而且是非常霸道的解释器级别的互斥。在GIL的机制下，一个线程访问解释器之后，其他的线程就需要等待这个线程释放之后才可以访问。这种处理方法在单处理器下面并没有什么问题，单处理器的本质是无法并行的。但是再多处理器下面，这种方法会导致无法利用多核的优势。&lt;/p&gt;
&lt;p&gt;Python
的线程调度跟操作系统的进程调度类似，都属于抢占式的调度。一个进程执行了一定时间之后，发出一个信号，操作系统响应这个时钟中断（信号），开始进程调度。而在
Python 中，则通过软件模拟这种中断，来实现线程调度。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;协程&lt;/h2&gt;
&lt;p&gt;协程我们可以看成是一种用户空间的线程,协程是主动的协作是工作，现有的操作系统线程调度是抢占式。两种的区别在于协作是调度，需要之前的任务主动放弃时间片。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;在 Python中，使用协程来做并发是对于系统资源消耗最小，可以最大化的做高并发，但是，需要我们自己来做调度，操作系统不会主动调度任务。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="process"></category><category term="thread"></category><category term="coroutine"></category><category term="python"></category></entry><entry><title>Mininet Walkthrough</title><link href="http://www.sunisdown.me/mininet-walkthrough.html" rel="alternate"></link><published>2014-10-16T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2014-10-16:mininet-walkthrough.html</id><summary type="html">&lt;p&gt;译者注： 这篇 Blog 是在学习 SDN 过程中翻译的Mininet
官方的文档。文档主要是介绍了 Mininet
的简单用法。会分成几个部分放出来，&lt;a class="reference external" href="http://mininet.org/walkthrough/#test-connectivity-between-hosts"&gt;原文&lt;/a&gt;。下面是正文&lt;/p&gt;
&lt;div class="section" id="part-1-everyday-mininet-usage"&gt;
&lt;h2&gt;Part 1: Everyday Mininet Usage&lt;/h2&gt;
&lt;p&gt;首先是是命令语法&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;$&lt;/tt&gt; 这个符号代表现在处于 Linux 的shell 交互下，需要使用的是 Linux
命令&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;mininet&amp;gt;&lt;/tt&gt; 这个符号表示现在处于 Mininet 交互下，需要使用的是
Mininet 的命令&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;＃&lt;/tt&gt; 这个符号表示的是现在处于 Linux 的 root 权限下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上相应的状态下下属于对应的命令，就能够得到正常的输出。需要注意的是&lt;tt class="docutils literal"&gt;mininet&amp;gt;&lt;/tt&gt;的情况比较特殊，需要使用
minient 的命令来进行交互。&lt;/p&gt;
&lt;div class="section" id="display-startup-options"&gt;
&lt;h3&gt;Display Startup Options&lt;/h3&gt;
&lt;p&gt;我们首先来启动 Mininet。&lt;/p&gt;
&lt;p&gt;键入以下命令来显示Mininet的帮助信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn -h

Usage: mn &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; mn -h &lt;span class="k"&gt;for&lt;/span&gt; details&lt;span class="o"&gt;)&lt;/span&gt;

The mn utility creates Mininet network from the &lt;span class="nb"&gt;command&lt;/span&gt; line. It can create
parametrized topologies, invoke the Mininet CLI, and run tests.

Options:
  -h, --help            show this &lt;span class="nb"&gt;help&lt;/span&gt; message and &lt;span class="nb"&gt;exit&lt;/span&gt;
  --switch&lt;span class="o"&gt;=&lt;/span&gt;SWITCH       ivs&lt;span class="p"&gt;|&lt;/span&gt;ovsk&lt;span class="p"&gt;|&lt;/span&gt;ovsl&lt;span class="p"&gt;|&lt;/span&gt;user&lt;span class="o"&gt;[&lt;/span&gt;,param&lt;span class="o"&gt;=&lt;/span&gt;value...&lt;span class="o"&gt;]&lt;/span&gt;
  --host&lt;span class="o"&gt;=&lt;/span&gt;HOST           cfs&lt;span class="p"&gt;|&lt;/span&gt;proc&lt;span class="p"&gt;|&lt;/span&gt;rt&lt;span class="o"&gt;[&lt;/span&gt;,param&lt;span class="o"&gt;=&lt;/span&gt;value...&lt;span class="o"&gt;]&lt;/span&gt;
  --controller&lt;span class="o"&gt;=&lt;/span&gt;CONTROLLER
                        none&lt;span class="p"&gt;|&lt;/span&gt;nox&lt;span class="p"&gt;|&lt;/span&gt;ovsc&lt;span class="p"&gt;|&lt;/span&gt;ref&lt;span class="p"&gt;|&lt;/span&gt;remote&lt;span class="o"&gt;[&lt;/span&gt;,param&lt;span class="o"&gt;=&lt;/span&gt;value...&lt;span class="o"&gt;]&lt;/span&gt;
  --link&lt;span class="o"&gt;=&lt;/span&gt;LINK           default&lt;span class="p"&gt;|&lt;/span&gt;tc&lt;span class="o"&gt;[&lt;/span&gt;,param&lt;span class="o"&gt;=&lt;/span&gt;value...&lt;span class="o"&gt;]&lt;/span&gt;
  --topo&lt;span class="o"&gt;=&lt;/span&gt;TOPO           linear&lt;span class="p"&gt;|&lt;/span&gt;minimal&lt;span class="p"&gt;|&lt;/span&gt;reversed&lt;span class="p"&gt;|&lt;/span&gt;single&lt;span class="p"&gt;|&lt;/span&gt;tree&lt;span class="o"&gt;[&lt;/span&gt;,param&lt;span class="o"&gt;=&lt;/span&gt;value...&lt;span class="o"&gt;]&lt;/span&gt;
  -c, --clean           clean and &lt;span class="nb"&gt;exit&lt;/span&gt;
  --custom&lt;span class="o"&gt;=&lt;/span&gt;CUSTOM       &lt;span class="nb"&gt;read&lt;/span&gt; custom topo and node params from .pyfile
  --test&lt;span class="o"&gt;=&lt;/span&gt;TEST           cli&lt;span class="p"&gt;|&lt;/span&gt;build&lt;span class="p"&gt;|&lt;/span&gt;pingall&lt;span class="p"&gt;|&lt;/span&gt;pingpair&lt;span class="p"&gt;|&lt;/span&gt;iperf&lt;span class="p"&gt;|&lt;/span&gt;all&lt;span class="p"&gt;|&lt;/span&gt;iperfudp&lt;span class="p"&gt;|&lt;/span&gt;none
  -x, --xterms          spawn xterms &lt;span class="k"&gt;for&lt;/span&gt; each node
  -i IPBASE, --ipbase&lt;span class="o"&gt;=&lt;/span&gt;IPBASE
                        base IP address &lt;span class="k"&gt;for&lt;/span&gt; hosts
  --mac                 automatically &lt;span class="nb"&gt;set&lt;/span&gt; host MACs
  --arp                 &lt;span class="nb"&gt;set&lt;/span&gt; all-pairs ARP entries
  -v VERBOSITY, --verbosity&lt;span class="o"&gt;=&lt;/span&gt;VERBOSITY
                        info&lt;span class="p"&gt;|&lt;/span&gt;warning&lt;span class="p"&gt;|&lt;/span&gt;critical&lt;span class="p"&gt;|&lt;/span&gt;error&lt;span class="p"&gt;|&lt;/span&gt;debug&lt;span class="p"&gt;|&lt;/span&gt;output
  --innamespace         sw and ctrl in namespace?
  --listenport&lt;span class="o"&gt;=&lt;/span&gt;LISTENPORT
                        base port &lt;span class="k"&gt;for&lt;/span&gt; passive switch listening
  --nolistenport        don&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t use passive listening port
  --pre&lt;span class="o"&gt;=&lt;/span&gt;PRE             CLI script to run before tests
  --post&lt;span class="o"&gt;=&lt;/span&gt;POST           CLI script to run after tests
  --pin                 pin hosts to CPU cores &lt;span class="o"&gt;(&lt;/span&gt;requires --host cfs or --host
                        rt&lt;span class="o"&gt;)&lt;/span&gt;
  --version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上所示，输出了 mn 的帮助信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="start-wireshark"&gt;
&lt;h3&gt;Start Wireshark&lt;/h3&gt;
&lt;p&gt;为了使用 Wireshark 来查看 OpenFlow 的控制信息，我们先打开 Wireshark
并让他在后台运行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo wireshark &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 Wireshark 的过滤选项中，输入&lt;tt class="docutils literal"&gt;of&lt;/tt&gt;，然后选择 Apply。&lt;/p&gt;
&lt;p&gt;In Wireshark, click Capture, then Interfaces, then select Start on the
loopback interface (&lt;tt class="docutils literal"&gt;lo&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;现在窗口上暂时应该没有任何 OpenFlow 的数据包。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
注：在Mininet VM镜像中Wireshark是默认已经安装的。如果你的系统中没有Wireshark的和OpenFlow，您可以使用Mininet的install.sh脚本，按以下步骤安装：
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~
$ git clone https://github.com/mininet/mininet＃如果它尚不存在
$ mininet/util/install.sh -w
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果已经安装了 Wireshark，但是运行不了（e.g.
你得到一个类似&lt;tt class="docutils literal"&gt;$DISPLAY not set&lt;/tt&gt;之类的错误信息，可以参考
FAQ，：&lt;a class="reference external" href="https://github.com/mininet/mininet/wiki/FAQ#wiki-X11-forwarding"&gt;https://github.com/mininet/mininet/wiki/FAQ#wiki-X11-forwarding&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;设置好 X11就可以正常运行 GUI 程序，并且使用 xterm
之类的终端仿真器了，后面的演示中可以用到。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interact-with-hosts-and-switches"&gt;
&lt;h3&gt;Interact with Hosts and Switches&lt;/h3&gt;
&lt;p&gt;Start a minimal topology and enter the CLI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认的最小拓扑结构包含有两台主机（h1，h2），还有一个 OpenFlow
的交换机，一个 OpenFlow
的控制器四台设备。这种拓扑接口也可以使用&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--topo=minimal&lt;/span&gt;&lt;/tt&gt;来指定。当然我们也可以使用其他的拓扑结构，具体信息可以看
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--topo&lt;/span&gt;&lt;/tt&gt;的信息。&lt;/p&gt;
&lt;p&gt;现在四个实体（h1，h2，c0，s1）都在运行着。c0作为控制器，是可以放在虚拟机外部的。&lt;/p&gt;
&lt;p&gt;如果没有具体的测试作为参数传递时，我们可以使用 Mininet 交互。&lt;/p&gt;
&lt;p&gt;在Wireshark的窗口中，你会看到内核交换机连接到控制器。&lt;/p&gt;
&lt;p&gt;显示Mininet CLI命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; &lt;span class="nb"&gt;help&lt;/span&gt;

Documented commands &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;topic&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;span class="o"&gt;========================================&lt;/span&gt;
EOF    &lt;span class="nb"&gt;exit&lt;/span&gt;   intfs     link   noecho       pingpair      py    &lt;span class="nb"&gt;source&lt;/span&gt;  xterm
dpctl  gterm  iperf     net    pingall      pingpairfull  quit  &lt;span class="nb"&gt;time&lt;/span&gt;
dump   &lt;span class="nb"&gt;help&lt;/span&gt;   iperfudp  nodes  pingallfull  px            sh    x

You may also send a &lt;span class="nb"&gt;command&lt;/span&gt; to a node using:
  &amp;lt;node&amp;gt; &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;args&lt;span class="o"&gt;}&lt;/span&gt;
For example:
  mininet&amp;gt; h1 ifconfig

The interpreter automatically substitutes IP addresses
&lt;span class="k"&gt;for&lt;/span&gt; node names when a node is the first arg, so commands
like
  mininet&amp;gt; h2 ping h3
should work.

Some character-oriented interactive commands require
noecho:
  mininet&amp;gt; noecho h2 vi foo.py
However, starting up an xterm/gterm is generally better:
  mininet&amp;gt; xterm h2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示节点：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mininet&amp;gt; nodes
available nodes are:
c0 h1 h2 s1
&lt;/pre&gt;
&lt;p&gt;显示网络链接：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mininet&amp;gt; net
h1 h1-eth0:s1-eth1
h2 h2-eth0:s1-eth2
s1 lo:  s1-eth1:h1-eth0 s1-eth2:h2-eth0
c0
&lt;/pre&gt;
&lt;p&gt;输出所有节点的信息：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mininet&amp;gt; dump
&amp;lt;Host h1: h1-eth0:10.0.0.1 pid=3278&amp;gt;
&amp;lt;Host h2: h2-eth0:10.0.0.2 pid=3279&amp;gt;
&amp;lt;OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=3282&amp;gt;
&amp;lt;OVSController c0: 127.0.0.1:6633 pid=3268&amp;gt;
&lt;/pre&gt;
&lt;p&gt;从上面的输出中，你可以看到有一台交换机和两台主机。&lt;/p&gt;
&lt;p&gt;在 Mininet 的CLI
中第一个字符串是设备名，那后面的命令就在该设备上执行。例如我们想在h1设备上执行&lt;tt class="docutils literal"&gt;ifconfig&lt;/tt&gt;则输入如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; h1 ifconfig -a
h1-eth0   Link encap:Ethernet  HWaddr 3e:94:43:b1:ad:48
          inet addr:10.0.0.1  Bcast:10.255.255.255  Mask:255.0.0.0
          inet6 addr: fe80::3c94:43ff:feb1:ad48/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:22 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1764 &lt;span class="o"&gt;(&lt;/span&gt;1.7 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的输出中，可以看见 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;h1-eth0&lt;/span&gt;&lt;/tt&gt; 跟 &lt;tt class="docutils literal"&gt;lo&lt;/tt&gt;两个接口，需要注意的是，在
Linux 系统的 shell 中运行&lt;tt class="docutils literal"&gt;ifconfig&lt;/tt&gt;是看不到h1-eth0。&lt;/p&gt;
&lt;p&gt;与&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;h1-eth0&lt;/span&gt;&lt;/tt&gt;相反的是，&lt;tt class="docutils literal"&gt;switch&lt;/tt&gt; 默认是跑在 root
的网络namespace上面，所以在&lt;tt class="docutils literal"&gt;switch&lt;/tt&gt;上执行命令与在 Linux 下的 shell
中是一样的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; s1 ifconfig-a
eth0      Link encap:Ethernet  HWaddr 08:00:27:98:dc:aa
          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe98:dcaa/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:46716 errors:0 dropped:0 overruns:0 frame:0
          TX packets:40265 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:10804203 &lt;span class="o"&gt;(&lt;/span&gt;10.8 MB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:40122199 &lt;span class="o"&gt;(&lt;/span&gt;40.1 MB&lt;span class="o"&gt;)&lt;/span&gt;

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:43654 errors:0 dropped:0 overruns:0 frame:0
          TX packets:43654 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:37264504 &lt;span class="o"&gt;(&lt;/span&gt;37.2 MB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:37264504 &lt;span class="o"&gt;(&lt;/span&gt;37.2 MB&lt;span class="o"&gt;)&lt;/span&gt;

lxcbr0    Link encap:Ethernet  HWaddr fe:5e:f0:f7:a6:f3
          inet addr:10.0.3.1  Bcast:10.0.3.255  Mask:255.255.255.0
          inet6 addr: fe80::a8c4:b5ff:fea6:2809/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:52 errors:0 dropped:0 overruns:0 frame:0
          TX packets:20 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:4759 &lt;span class="o"&gt;(&lt;/span&gt;4.7 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:2952 &lt;span class="o"&gt;(&lt;/span&gt;2.9 KB&lt;span class="o"&gt;)&lt;/span&gt;

ovs-system Link encap:Ethernet  HWaddr 3e:79:59:3d:d9:bb
          BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;

s1        Link encap:Ethernet  HWaddr 6e:8c:5d:91:d5:44
          inet6 addr: fe80::fc47:8aff:fe6a:4155/64 Scope:Link
          UP BROADCAST RUNNING  MTU:1500  Metric:1
          RX packets:13 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1026 &lt;span class="o"&gt;(&lt;/span&gt;1.0 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;

s1-eth1   Link encap:Ethernet  HWaddr 5e:a2:f7:86:f3:b1
          inet6 addr: fe80::5ca2:f7ff:fe86:f3b1/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:22 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:1764 &lt;span class="o"&gt;(&lt;/span&gt;1.7 KB&lt;span class="o"&gt;)&lt;/span&gt;

s1-eth2   Link encap:Ethernet  HWaddr b2:c6:37:e0:d9:61
          inet6 addr: fe80::b0c6:37ff:fee0:d961/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:21 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:1674 &lt;span class="o"&gt;(&lt;/span&gt;1.6 KB&lt;span class="o"&gt;)&lt;/span&gt;

veth14524J Link encap:Ethernet  HWaddr fe:ca:13:f5:dd:b4
          inet6 addr: fe80::fcca:13ff:fef5:ddb4/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:40 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:4190 &lt;span class="o"&gt;(&lt;/span&gt;4.1 KB&lt;span class="o"&gt;)&lt;/span&gt;

veth2K19CE Link encap:Ethernet  HWaddr fe:f1:f7:e8:49:45
          inet6 addr: fe80::fcf1:f7ff:fee8:4945/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:42 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:4370 &lt;span class="o"&gt;(&lt;/span&gt;4.3 KB&lt;span class="o"&gt;)&lt;/span&gt;

veth9WSHRK Link encap:Ethernet  HWaddr fe:87:1d:33:f6:41
          inet6 addr: fe80::fc87:1dff:fe33:f641/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8 errors:0 dropped:0 overruns:0 frame:0
          TX packets:43 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:648 &lt;span class="o"&gt;(&lt;/span&gt;648.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:4460 &lt;span class="o"&gt;(&lt;/span&gt;4.4 KB&lt;span class="o"&gt;)&lt;/span&gt;

vethH2K7R5 Link encap:Ethernet  HWaddr fe:5e:f0:f7:a6:f3
          inet6 addr: fe80::fc5e:f0ff:fef7:a6f3/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:14 errors:0 dropped:0 overruns:0 frame:0
          TX packets:48 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1776 &lt;span class="o"&gt;(&lt;/span&gt;1.7 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:5030 &lt;span class="o"&gt;(&lt;/span&gt;5.0 KB&lt;span class="o"&gt;)&lt;/span&gt;

vethO99MI2 Link encap:Ethernet  HWaddr fe:cf:ee:97:fb:7f
          inet6 addr: fe80::fccf:eeff:fe97:fb7f/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:14 errors:0 dropped:0 overruns:0 frame:0
          TX packets:51 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1767 &lt;span class="o"&gt;(&lt;/span&gt;1.7 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:5294 &lt;span class="o"&gt;(&lt;/span&gt;5.2 KB&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的输出中包含交换机的虚拟网卡 s1，以及主机的 eth0。&lt;/p&gt;
&lt;p&gt;为了区别显示host
主机的网络是隔离的，我们可以通过&lt;tt class="docutils literal"&gt;arp&lt;/tt&gt;与&lt;tt class="docutils literal"&gt;route&lt;/tt&gt;命令来做演示，分别在
s1与h1上面演示如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; s1 arp
Address                  HWtype  HWaddress           Flags Mask            Iface
localhost                ether   00:16:3e:54:9c:03   C                     lxcbr0
localhost                ether   52:54:00:12:35:02   C                     eth0
localhost                ether   52:54:00:12:35:03   C                     eth0
localhost                ether   00:16:3e:51:24:a7   C                     lxcbr0
mininet&amp;gt; s1 route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         localhost       0.0.0.0         UG    &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; eth0
10.0.2.0        *               255.255.255.0   U     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; eth0
10.0.3.0        *               255.255.255.0   U     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; lxcbr0
172.17.0.0      *               255.255.0.0     U     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; docker0
mininet&amp;gt; h1 arp
mininet&amp;gt; h1 route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        *               255.0.0.0       U     &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;        &lt;span class="m"&gt;0&lt;/span&gt; h1-eth0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样可以做到将每一个主机，交换机，以及控制器都放到他自己的标准的 network
namespace
中，但是这种做法并没有什么特别的优势，除非你想复制一个非常复杂的网络。Mininet
不支持这种做法，你可以通过&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--innamespace&lt;/span&gt;&lt;/tt&gt;参数来查看更多的信息。
&lt;tt class="docutils literal"&gt;译者注：感觉有点像 LXC 或者说想最近比较火的 Docker&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意&lt;/em&gt;:只有网络是虚拟出来的，每一个主机里面的进程使用的都是同一套目录，可以看到相同的进程集合，我们打印不同主机下面的进程列表看看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; h1 ps -a
  PID TTY          TIME CMD
 &lt;span class="m"&gt;3899&lt;/span&gt; pts/3    00:00:00 tmux
 &lt;span class="m"&gt;4000&lt;/span&gt; pts/23   00:00:00 sudo
 &lt;span class="m"&gt;4001&lt;/span&gt; pts/23   00:00:51 wireshark
 &lt;span class="m"&gt;4030&lt;/span&gt; pts/23   00:00:00 dbus-launch
 &lt;span class="m"&gt;4530&lt;/span&gt; pts/23   00:00:43 dumpcap
 &lt;span class="m"&gt;4541&lt;/span&gt; pts/22   00:00:00 sudo
 &lt;span class="m"&gt;4542&lt;/span&gt; pts/22   00:00:00 mn
mininet&amp;gt; h2 ps -a
  PID TTY          TIME CMD
 &lt;span class="m"&gt;3899&lt;/span&gt; pts/3    00:00:00 tmux
 &lt;span class="m"&gt;4000&lt;/span&gt; pts/23   00:00:00 sudo
 &lt;span class="m"&gt;4001&lt;/span&gt; pts/23   00:00:52 wireshark
 &lt;span class="m"&gt;4030&lt;/span&gt; pts/23   00:00:00 dbus-launch
 &lt;span class="m"&gt;4530&lt;/span&gt; pts/23   00:00:43 dumpcap
 &lt;span class="m"&gt;4541&lt;/span&gt; pts/22   00:00:00 sudo
 &lt;span class="m"&gt;4542&lt;/span&gt; pts/22   00:00:00 mn
mininet&amp;gt; s1 ps -a
  PID TTY          TIME CMD
 &lt;span class="m"&gt;3899&lt;/span&gt; pts/3    00:00:00 tmux
 &lt;span class="m"&gt;4000&lt;/span&gt; pts/23   00:00:00 sudo
 &lt;span class="m"&gt;4001&lt;/span&gt; pts/23   00:00:54 wireshark
 &lt;span class="m"&gt;4030&lt;/span&gt; pts/23   00:00:00 dbus-launch
 &lt;span class="m"&gt;4530&lt;/span&gt; pts/23   00:00:46 dumpcap
 &lt;span class="m"&gt;4541&lt;/span&gt; pts/22   00:00:00 sudo
 &lt;span class="m"&gt;4542&lt;/span&gt; pts/22   00:00:00 mn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上所示， h1，h2，s1三个进程列表是完全相同的。&lt;/p&gt;
&lt;p&gt;其实完全可以做到各个主机完全独立，就想 LXC 那样，但是目前 Mininet
并没有这么做。在 Mininet 中所有的进程都放在 root 下面，这样你可以在
Linux的 shell
中直接用&lt;tt class="docutils literal"&gt;kill&lt;/tt&gt;或者&lt;tt class="docutils literal"&gt;ps&lt;/tt&gt;这些命令查看或者杀死进程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-connectivity-between-hosts"&gt;
&lt;h3&gt;Test connectivity between hosts&lt;/h3&gt;
&lt;p&gt;现在，验证您可以h1 ping 通 h2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; h1 ping h2 -c 1
PING 10.0.0.2 &lt;span class="o"&gt;(&lt;/span&gt;10.0.0.2&lt;span class="o"&gt;)&lt;/span&gt; 56&lt;span class="o"&gt;(&lt;/span&gt;84&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
&lt;span class="m"&gt;64&lt;/span&gt; bytes from 10.0.0.2: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8.57 ms

--- 10.0.0.2 ping statistics ---
&lt;span class="m"&gt;1&lt;/span&gt; packets transmitted, &lt;span class="m"&gt;1&lt;/span&gt; received, 0% packet loss, &lt;span class="nb"&gt;time&lt;/span&gt; 0ms
rtt min/avg/max/mdev &lt;span class="o"&gt;=&lt;/span&gt; 8.576/8.576/8.576/0.000 ms
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;mininet中的命令语法如上所示。&lt;tt class="docutils literal"&gt;host1 command&amp;nbsp; host2&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;在 Wireshark 中可以看到 OpenFlow 的控制流量，可以看到h1 ARPs h2的
mac，并将一个 &lt;tt class="docutils literal"&gt;packet_in&lt;/tt&gt;发送到
&lt;tt class="docutils literal"&gt;c0&lt;/tt&gt;,然后&lt;tt class="docutils literal"&gt;c0&lt;/tt&gt;发送&lt;tt class="docutils literal"&gt;packet_out&lt;/tt&gt;消息流广播到交换机（在本例中，唯一的其他数据端口）。第二个主机接受到的ARP请求，并发送一个广播答复。此回复进到控制器，该控制器将其发送到&lt;tt class="docutils literal"&gt;h1&lt;/tt&gt;并且
pushes down a flow entry。&lt;/p&gt;
&lt;p&gt;现在第一主机知道的第二个IP地址，并且可以通过ICMP ping
来回显请求。这个请求，连同其从第二主机对应的应答，both go the controller
and result in a flow entry pushed down (along with the actual packets
getting sent out).&lt;/p&gt;
&lt;p&gt;重复前一条命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; h1 ping -c &lt;span class="m"&gt;1&lt;/span&gt; h2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这次 ping 的时间将比第一次低的多， A flow entry covering ICMP ping
traffic was previously installed in the switch, so no control traffic
was generated, and the packets immediately pass through the switch.&lt;/p&gt;
&lt;p&gt;使用&lt;tt class="docutils literal"&gt;pingall&lt;/tt&gt;命令可以让每一个节点直接都产生上面的效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; pingall
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-a-simple-web-server-and-client"&gt;
&lt;h3&gt;Run a simple web server and client&lt;/h3&gt;
&lt;p&gt;我们不单可以在主机上面运行&lt;tt class="docutils literal"&gt;ping&lt;/tt&gt;命令，每一条
Linux下的命令或者程序都可以在 Mininet 中运行：&lt;/p&gt;
&lt;p&gt;接下来，尝试开始于h1启动一个简单的HTTP服务器上，然后从h2发出请求，最后关闭Web服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; h1 python -m SimpleHTTPServer &lt;span class="m"&gt;80&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
mininet&amp;gt; h2 wget h1
--2014-09-15 08:10:11--  http://10.0.0.1/
Connecting to 10.0.0.1:80... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;2647&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;2.6K&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;text/html&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: ‘index.html’

     0K ..                                                    100% 71.7M&lt;span class="o"&gt;=&lt;/span&gt;0s

2014-09-15 08:10:11 &lt;span class="o"&gt;(&lt;/span&gt;71.7 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - ‘index.html’ saved &lt;span class="o"&gt;[&lt;/span&gt;2647/2647&lt;span class="o"&gt;]&lt;/span&gt;
mininet&amp;gt; h1 &lt;span class="nb"&gt;kill&lt;/span&gt; %python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;退出mininet交互命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt;exit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanup"&gt;
&lt;h3&gt;cleanup&lt;/h3&gt;
&lt;p&gt;如果Mininet出于某种原因崩溃，可以用下面命令来清理：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mn -c
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-advanced-startup-options"&gt;
&lt;h2&gt;Part 2: 高级选项Advanced Startup Options&lt;/h2&gt;
&lt;div class="section" id="run-a-regression-test"&gt;
&lt;h3&gt;回归测试Run a Regression Test&lt;/h3&gt;
&lt;p&gt;Mininet 可以用于直接运行回归测试，不一定要切换到他的 CLI 下面。&lt;/p&gt;
&lt;p&gt;运行回归测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --test pingpair
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条命令会创建一个小的拓扑结构，然后启动 OpenFLow 的控制器，然后跑 ping
测试，最后再把拓扑结构跟控制器关掉。&lt;/p&gt;
&lt;p&gt;另一种有用的试验是iperf的（给它约10秒来完成）：
还有一直常用的测试是&lt;tt class="docutils literal"&gt;iperf&lt;/tt&gt;(完成这个测试大概需要10s 钟):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --test iperf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此命令创建的相同Mininet，并在其中一台 host 上面跑 iperf server,
然后在另外一台 host 上面运行iperf client 然后解析取得带宽情况。
####更改拓扑结构大小和类型 Changing Topology Size and Type&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mininet 默认的拓扑结构是由两台 host
以及一台交换机组成的，你可以用&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--topo&lt;/span&gt;&lt;/tt&gt;参数来更改拓扑结构。
假设你要在一个交换机与三台 host 之间做 ping 探测验证（verify all-pairs
ping connectivity）。：&lt;/p&gt;
&lt;p&gt;运行回归测试：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --test pingall --topo single,3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一个例子中，使用线性拓扑（其中每个交换机配有一个主机，并且所有的交换机连接在一起）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --test pingall --topo linear,4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;课哟用参数来控制拓扑结构是 Mininet 中最有用的功能之一，非常强大。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="link-variations"&gt;
&lt;h3&gt;链路变化 Link variations&lt;/h3&gt;
&lt;p&gt;Mininet2.0允许你设置连接参数，甚至可以通过命令行实现自动化设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --link tc,bw&lt;span class="o"&gt;=&lt;/span&gt;10,delay&lt;span class="o"&gt;=&lt;/span&gt;10ms
 mininet&amp;gt; iperf
 ...
 mininet&amp;gt; h1 ping -c10 h2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的设置每两个节点之间的延迟是10ms，因为 ICMP
请求传过了两条链路（一次是到大交换机，一次到达主机），往返时间（RRT）就应该是40ms。
你还可以使用
&lt;a class="reference external" href="https://github.com/mininet/mininet/wiki/Introduction-to-Mininet"&gt;PythonAPI&lt;/a&gt;
来做更多的事儿,不过现在我们先继续往下演练。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adjustable-verbosity"&gt;
&lt;h3&gt;调整输出信息Adjustable Verbosity&lt;/h3&gt;
&lt;p&gt;Mininet默认输出信息的级别是 &lt;tt class="docutils literal"&gt;Info&lt;/tt&gt;，&lt;tt class="docutils literal"&gt;Info&lt;/tt&gt;级别会输出
Mininet的详细信息。 我们也可以通过
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-v&lt;/span&gt;&lt;/tt&gt;参数来设置输出&lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt;信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn -v debug
...
mininet&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样会打印出更多额外的细节。现在尝试一下&lt;tt class="docutils literal"&gt;output&lt;/tt&gt;参数，这样可以在
CLI 中打印更少的信息。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn -v output
mininet&amp;gt; &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了上面的几个级别，还有其他的级别可以使用，比如&lt;tt class="docutils literal"&gt;warning&lt;/tt&gt;等&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-topologies"&gt;
&lt;h3&gt;Custom Topologies自定义拓扑结构&lt;/h3&gt;
&lt;p&gt;在&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;custom/topo-2sw-2host.py&lt;/span&gt;&lt;/tt&gt;中是一个例子可以拿来参考，我们可以看到通过
PythonAPI 我们可以很简单的来定义拓扑结构。
这个例子直接连接两台交换机，每个交换机带有一台主机。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Custom topology example&lt;/span&gt;

&lt;span class="sd"&gt;Two directly connected switches plus a host for each switch:&lt;/span&gt;

&lt;span class="sd"&gt;   host --- switch --- switch --- host&lt;/span&gt;

&lt;span class="sd"&gt;Adding the &amp;#39;topos&amp;#39; dict with a key/value pair to generate our newly defined&lt;/span&gt;
&lt;span class="sd"&gt;topology enables one to pass in &amp;#39;--topo=mytopo&amp;#39; from the command line.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mininet.topo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Topo&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTopo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Topo&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Simple topology example.&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Create custom topo.&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Initialize topology&lt;/span&gt;
        &lt;span class="n"&gt;Topo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Add hosts and switches&lt;/span&gt;
        &lt;span class="n"&gt;leftHost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rightHost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;h2&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;leftSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSwitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s3&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rightSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSwitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s4&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Add links&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;leftHost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leftSwitch&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;leftSwitch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rightSwitch&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rightSwitch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rightHost&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;topos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mytopo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyTopo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们提供一个自定义的mininet 文件，就可以创建新的拓扑结构、交换机类型。
我们在命令行里面测试一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --custom ~/mininet/custom/topo-2sw-2host.py --topo mytopo --test pingall
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2
*** Adding switches:
s3 s4
*** Adding links:
&lt;span class="o"&gt;(&lt;/span&gt;h1, s3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;h2, s4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;s3, s4&lt;span class="o"&gt;)&lt;/span&gt;
*** Configuring hosts
h1 h2
*** Starting controller
*** Starting &lt;span class="m"&gt;2&lt;/span&gt; switches
s3 s4
*** Ping: testing ping reachability
h1 -&amp;gt; h2
h2 -&amp;gt; h1
*** Results: 0% dropped &lt;span class="o"&gt;(&lt;/span&gt;2/2 received&lt;span class="o"&gt;)&lt;/span&gt;
*** Stopping &lt;span class="m"&gt;2&lt;/span&gt; switches
s3 ..s4 ..
*** Stopping &lt;span class="m"&gt;2&lt;/span&gt; hosts
h1 h2
*** Stopping &lt;span class="m"&gt;1&lt;/span&gt; controllers
c0
*** Done
completed in 1.220 seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id-mac"&gt;
&lt;h3&gt;ID= MAC&lt;/h3&gt;
&lt;p&gt;默认情况下，host 的 mac 地址是随机分配的。这会导致每次 mininet
创建的时候，MAC地址都会改变，这会给调试带来一些困难&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--mac&lt;/span&gt;&lt;/tt&gt;参数可以解决上面的问题，栗子如下：&lt;/p&gt;
&lt;p&gt;之前：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn

mininet&amp;gt; h1 ifconfig
h1-eth0   Link encap:Ethernet  HWaddr c2:d9:4a:37:25:17
          inet addr:10.0.0.1  Bcast:10.255.255.255  Mask:255.0.0.0
          inet6 addr: fe80::c0d9:4aff:fe37:2517/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:17 errors:0 dropped:0 overruns:0 frame:0
          TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1398 &lt;span class="o"&gt;(&lt;/span&gt;1.3 KB&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:578 &lt;span class="o"&gt;(&lt;/span&gt;578.0 B&lt;span class="o"&gt;)&lt;/span&gt;

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;  TX bytes:0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--mac&lt;/span&gt;&lt;/tt&gt;参数：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo mn --mac

mininet&amp;gt; h1 ifconfig
h1-eth0   Link encap:Ethernet  HWaddr 00:00:00:00:00:01
          inet addr:10.0.0.1  Bcast:10.255.255.255  Mask:255.0.0.0
          inet6 addr: fe80::200:ff:fe00:1/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:17 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1414 (1.4 KB)  TX bytes:676 (676.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/pre&gt;
&lt;p&gt;n contrast, the MACs for switch data ports reported by Linux will remain
random. This is because you can ‘assign’ a MAC to a data port using
OpenFlow, as noted in the FAQ. This is a somewhat subtle point which you
can probably ignore for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xterm-display-xterm"&gt;
&lt;h3&gt;XTerm Display xterm屏显&lt;/h3&gt;
&lt;p&gt;为了方便更复杂的调试工作，可以使用 mininet 的 xterms&lt;/p&gt;
&lt;p&gt;可以通过&lt;tt class="docutils literal"&gt;x&lt;/tt&gt;选项来给每一个 host 与交换机启动一个&lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn -x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;后一秒钟，在xterm终端会弹出，并且具有自动设置窗口的名称(&lt;tt class="docutils literal"&gt;h1&lt;/tt&gt;,&lt;tt class="docutils literal"&gt;h2&lt;/tt&gt;...)。&lt;/p&gt;
&lt;p&gt;或者，您也可以用下面的方式打开更多的xterm。&lt;/p&gt;
&lt;p&gt;默认情况下，仅仅 host 需要一个但大户的
namespace，而交换机的窗口则不用(与政策的终端类似) but can be a
convenient place to run and leave up switch debug commands, such as flow
counter dumps.&lt;/p&gt;
&lt;p&gt;在你想看到交互命令的时候，xterm
很有用，但是如果你仅仅想看到输出信息，那你可能想停掉 xterm&lt;/p&gt;
&lt;p&gt;例如： 在&lt;tt class="docutils literal"&gt;switch: s1 (root)&lt;/tt&gt;的 xterm下面运行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# dpctl dump-flows tcp:127.0.0.1:6634&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为交换机中没有数据流量，所以不会有信息输出。 To use &lt;tt class="docutils literal"&gt;dpctl&lt;/tt&gt; with
other switches, start up mininet in verbose mode and look at the passive
listening ports for the switches when they’re created.&lt;/p&gt;
&lt;p&gt;现在，在&lt;tt class="docutils literal"&gt;host: h1&lt;/tt&gt;的xterm中运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ping 10.0.0.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;回到&lt;tt class="docutils literal"&gt;s1&lt;/tt&gt;的 xterm中查看:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# dpctl dump-flows tcp:127.0.0.1:6634&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在就可以看见数据流了。 另外我们可以直接用&lt;tt class="docutils literal"&gt;dpctl&lt;/tt&gt;命令直接调用
Mininet CLI 里面的命令，而不需要启动任何&lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt;或者指定交换机的IP
跟端口。 我们看已通过&lt;tt class="docutils literal"&gt;ifconfig&lt;/tt&gt;命令来判断xterm
是否在&lt;tt class="docutils literal"&gt;root&lt;/tt&gt;的名字空间下，如果所有的网卡都显示出来（包含&lt;tt class="docutils literal"&gt;eth0&lt;/tt&gt;)，那他就是在&lt;tt class="docutils literal"&gt;root&lt;/tt&gt;下。&lt;/p&gt;
&lt;p&gt;从 mininet 的 CLI中退出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt;exit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样 mininet 的 CLI就自动关闭了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-switch-types"&gt;
&lt;h3&gt;Other Switch Types 其他类型的交换机&lt;/h3&gt;
&lt;p&gt;我们可以使用不同的交换机类型。例如：运行 user-space 交换机：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo mn --switch user --test iperf
&lt;/pre&gt;
&lt;p&gt;值得注意的是这种交换机下，带宽相比于前面的内核态交换机要小的多。 如果做
ping
探测，也会有更高的延迟，这是因为现在的数据包需要从内核态转换到用户空间，消耗了更多的资源。&lt;/p&gt;
&lt;p&gt;另一方面，用户空间的交换机会有一些新功能，如果交换机的性能不是关键问题是的时候。
在 Mininet 虚拟机中预装了另外一个交换机类型是
&lt;tt class="docutils literal"&gt;Open vSwitch(OVS)&lt;/tt&gt;，在&lt;tt class="docutils literal"&gt;iperf&lt;/tt&gt;测试中，带宽会比内核态交换机更大。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --switch ovsk --test iperf
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mininet-benchmark"&gt;
&lt;h3&gt;Mininet Benchmark&lt;/h3&gt;
&lt;p&gt;To record the time to set up and tear down a topology, use test ‘none’:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --test none
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-in-its-own-namespace-user-switch-only"&gt;
&lt;h3&gt;Everything in its own Namespace (user switch only)&lt;/h3&gt;
&lt;p&gt;默认情况下，主机都放在自己的命名空间，
而交换机和控制器的&lt;tt class="docutils literal"&gt;root&lt;/tt&gt;命名空间。
我们可以通过&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--innamespace&lt;/span&gt;&lt;/tt&gt;参数来把交换机放在自己的名字空间中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --innamespace --switch user
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of using loopback, the switches will talk to the controller
through a separately bridged control connection.
就其本身而言，这个选项是没有多大用处的，但它确实提供了如何分离不同交换机的例子。&lt;/p&gt;
&lt;p&gt;请注意，此选项不会（截至12年11月19日）与Open vSwitch的工作。&lt;/p&gt;
&lt;p&gt;需要注意的是这个选项在&lt;tt class="docutils literal"&gt;Open vSwitch&lt;/tt&gt;中是没法使用的（截至12年11月19日是没法使用）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt;exit
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-3-mininet-command-line-interface-cli-commands"&gt;
&lt;h2&gt;Part 3: Mininet Command-Line Interface (CLI) Commands&lt;/h2&gt;
&lt;p&gt;第3部分：Mininet命令行界面（CLI）命令&lt;/p&gt;
&lt;div class="section" id="display-options"&gt;
&lt;h3&gt;Display Options&lt;/h3&gt;
&lt;p&gt;我们可以通过启动一个最小拓扑结构，然后让他一直运行，来来查看 mininet 的
CLI 的选项列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;显示选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt;help
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="python-interpreter"&gt;
&lt;h3&gt;Python Interpreter&lt;/h3&gt;
&lt;p&gt;如果在 Mininet CLI中的命令的第一个字符串是&lt;tt class="docutils literal"&gt;py&lt;/tt&gt;，那这个条命令会用
Python 来执行。 这对于扩展 Mininet，探测 mininet的内部工作机智都有帮助。
每个主机，交换机和控制器都有一个与之关联的对象。&lt;/p&gt;
&lt;p&gt;在Mininet命令行下运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; py &lt;span class="s1"&gt;&amp;#39;hello &amp;#39;&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;打印 locals:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; py locals&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;h2&amp;#39;&lt;/span&gt;: &amp;lt;Host h2: h2-eth0:10.0.0.2 &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5166&amp;gt; , &lt;span class="s1"&gt;&amp;#39;net&amp;#39;&lt;/span&gt;: &amp;lt;mininet.net.Mininet object at 0x7f7c47668ad0&amp;gt;, &lt;span class="s1"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;: &amp;lt;Host h1: h1-eth0:10.0.0.1 &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5165&amp;gt; , &lt;span class="s1"&gt;&amp;#39;c0&amp;#39;&lt;/span&gt;: &amp;lt;OVSController c0: 127.0.0.1:6633 &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5157&amp;gt; , &lt;span class="s1"&gt;&amp;#39;s1&amp;#39;&lt;/span&gt;: &amp;lt;OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None &lt;span class="nv"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5169&amp;gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还可以通过 dir()函数来查看节点的方法和属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; py dir&lt;span class="o"&gt;(&lt;/span&gt;s1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;IP&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;MAC&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;TCReapply&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;__weakref__&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;addIntf&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;attach&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;checkSetup&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;cleanup&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;cmdPrint&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;config&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;configDefault&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;connected&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;connectionsTo&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;controlIntf&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;controllerUUIDs&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;datapath&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;defaultDpid&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;defaultIntf&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;deleteIntfs&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;detach&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;dpctl&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;dpid&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;dpidLen&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;execed&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;failMode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;fdToNode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;inNamespace&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;inToNode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;intf&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;intfIsUp&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;intfList&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;intfNames&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;intfs&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;isSetup&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;lastCmd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;lastPid&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;linkTo&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;listenPort&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;monitor&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;nameToIntf&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;newPort&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;opts&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;outToNode&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;params&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pexec&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pollOut&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;popen&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;portBase&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;ports&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;read&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;readbuf&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;sendCmd&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;sendInt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setARP&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setDefaultRoute&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setHostRoute&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setIP&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setMAC&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setParam&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;setup&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;shell&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;startShell&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;stdin&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;stdout&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;stop&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;terminate&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;waitOutput&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;waitReadable&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;waiting&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;您可以通过使用help()函数读取在线文档，查看节点上可用的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; py help&lt;span class="o"&gt;(&lt;/span&gt;h1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#(按`q`退出文档)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also evaluate methods of variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mininet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Host&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;eth0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5165&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;mininet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="link-up-down"&gt;
&lt;h3&gt;Link Up/Down&lt;/h3&gt;
&lt;p&gt;断开/联通链路，对于提供容错能力的测试非常有用。&lt;/p&gt;
&lt;p&gt;比如端口&lt;tt class="docutils literal"&gt;h1&lt;/tt&gt;与&lt;tt class="docutils literal"&gt;s1&lt;/tt&gt;之间的连接：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; link s1 h1 down
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你应该可以看到一个OpenFlow产生了一个的端口状态变化通知。&lt;/p&gt;
&lt;p&gt;重新连接&lt;tt class="docutils literal"&gt;h1&lt;/tt&gt; &lt;tt class="docutils literal"&gt;s1&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt;link s1 h1 up
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xterm-display"&gt;
&lt;h3&gt;XTerm Display&lt;/h3&gt;
&lt;p&gt;要显示&lt;tt class="docutils literal"&gt;h1&lt;/tt&gt; 与 &lt;tt class="docutils literal"&gt;h2&lt;/tt&gt;的 xterm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mininet&amp;gt; xterm h1 h2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-4-python-api-examples"&gt;
&lt;h2&gt;Part 4: Python API Examples&lt;/h2&gt;
&lt;p&gt;在&lt;a class="reference external" href="https://github.com/mininet/mininet/tree/master/examples"&gt;Mininet源代码&lt;/a&gt;
中的示例目录包括如何使用Mininet的Python的API，
还有一些可能有用的代码并没有放到主代码库中。&lt;/p&gt;
&lt;div class="section" id="ssh-daemon-per-host"&gt;
&lt;h3&gt;SSH daemon per host&lt;/h3&gt;
&lt;p&gt;这个栗子对于要在每台设备上启用 ssh 服务可能很有帮助。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ~/mininet/examples/sshd.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在另外一个终端上，就可以ssh到任何主机并运行交互式命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh 10.0.0.1
$ ping 10.0.0.2
...
$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;退出mininet：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;你会想重新看看那这些栗子可以看&lt;a class="reference external" href="https://github.com/mininet/mininet/wiki/Introduction-to-Mininet"&gt;Introduction to
Mininet&lt;/a&gt;
，里面介绍了 Python API。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-5-walkthrough-complete"&gt;
&lt;h2&gt;Part 5: Walkthrough Complete!&lt;/h2&gt;
&lt;p&gt;恭喜！你已经完成了Mininet演练。之后可以随意尝试新的​​拓扑结构和控制器或查看源代码。&lt;/p&gt;
&lt;div class="section" id="next-steps-to-mastering-mininet"&gt;
&lt;h3&gt;Next Steps to mastering Mininet&lt;/h3&gt;
&lt;p&gt;阅读 &lt;a class="reference external" href="https://github.com/mininet/openflow-tutorial/wiki"&gt;OpenFlow
的教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然你可以得到合理的利用Mininet的CLI，但是如果你掌握了 Python
API，Mininet会变得更加有用和强大的。 所以去看 &lt;a class="reference external" href="https://github.com/mininet/mininet/wiki/Introduction-to-Mininet"&gt;Mininet
的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;后面会解释如何远程控制 mininet（e.g. one running outside Mininet’s
control）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="appendix-supplementary-information"&gt;
&lt;h3&gt;Appendix: Supplementary Information&lt;/h3&gt;
&lt;p&gt;这些都不是必需的，但你会发现它们非常有用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-a-remote-controller"&gt;
&lt;h3&gt;Using a Remote Controller&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;注意：这一步是不是默认演练的一部分;如果你在mininet
之外运行一个控制器，这个附录将有些帮助。 在 OpenFLow
的教程中介绍了可以使用``controller --remote``参数来启动一个交换机，然后你可以用SDN
控制器比如``POX``, ``NOX``, ``Beacon`` 或者
``Floodlight``之类的来控制这个交换机。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当您启动Mininet网络，每个交换机可以连接到控制器，无论这个控制器在哪里。&lt;/p&gt;
&lt;p&gt;如果你本地装有开发工具或者控制器，又或者你想在不同的物理机上面运行控制器，这种设置会非常方便。&lt;/p&gt;
&lt;p&gt;如果你想尝试一下这个，只需要加上 ip 或者port 就可以：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --controller&lt;span class="o"&gt;=&lt;/span&gt;remote,ip&lt;span class="o"&gt;=[&lt;/span&gt;controller IP&lt;span class="o"&gt;]&lt;/span&gt;,port&lt;span class="o"&gt;=[&lt;/span&gt;controller listening port&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如，要运行POX的交换机，你可以这样做&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/pox
$ ./pox.py forwarding.l2_learning
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在另一个窗口，启动Mininet连接到“远程”控制器（这实际上是在本地运行，但Mininet的控制范围之外）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mn --controller&lt;span class="o"&gt;=&lt;/span&gt;remote,ip&lt;span class="o"&gt;=&lt;/span&gt;127.0.0.1,port&lt;span class="o"&gt;=&lt;/span&gt;6633
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;注意，这些其实都是默认的IP地址和端口值。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果你制造一些流量（如h1 ping h2），
你应该能够观察到窗口显示该交换机连接，而且输出了一些流量数据。&lt;/p&gt;
&lt;p&gt;mininet虚拟机中已经预装了一些OpenFlow的控制器，你可以很轻松的就把这些东西搞起来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nox-classic"&gt;
&lt;h3&gt;NOX Classic&lt;/h3&gt;
&lt;p&gt;使用 mininet 的默认&lt;tt class="docutils literal"&gt;util/install.sh &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;并不会安装 NOX。
如果你想安装它，执行&lt;tt class="docutils literal"&gt;sudo ~/mininet/util/install.sh &lt;span class="pre"&gt;-x&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是NOX Classic已被弃用，可能不会在将来得到支持。&lt;/p&gt;
&lt;p&gt;早 NOX 中运行&lt;tt class="docutils literal"&gt;pyswitch&lt;/tt&gt;来做一个回归测试，
首先确认&lt;tt class="docutils literal"&gt;NOX_CORE_DIR&lt;/tt&gt;已经在环境变量中设置好。&lt;/p&gt;
&lt;p&gt;首先验证NOX正在运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$NOX_CORE_DIR&lt;/span&gt;
$ ./nox_core -v -i ptcp:
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ctrl-C来杀死 NOX 进程，然后运行与NOX 的 &lt;tt class="docutils literal"&gt;pyswitch&lt;/tt&gt;测试：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd
$ sudo -E mn --controller=nox,pyswitch --test pingpair
&lt;/pre&gt;
&lt;p&gt;注意，&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--controller&lt;/span&gt;&lt;/tt&gt;选项具有方便的语法来向控制器类型指定选项
（在这种情况下，nox 运行 pyswitch。）&lt;/p&gt;
&lt;p&gt;几秒钟之后，而NOX加载完成并且交换机之间相互连接，随后&lt;tt class="docutils literal"&gt;ping&lt;/tt&gt;。&lt;/p&gt;
&lt;p&gt;注意，此时，&lt;tt class="docutils literal"&gt;mn&lt;/tt&gt;应该由&lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;-E&lt;/span&gt;&lt;/tt&gt;来调用，以保持NOX_CORE_DIR环境变量。
如果你是通过&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--controller&lt;/span&gt; remote&lt;/tt&gt;来远程启用的
nox，那就不需要加&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-E&lt;/span&gt;&lt;/tt&gt;参数了。
或者，你可以改变的&lt;tt class="docutils literal"&gt;/etc/sudoers&lt;/tt&gt;文件，把&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Defaults        env_reset
&lt;/pre&gt;
&lt;p&gt;修改成&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Defaults        !env_reset
&lt;/pre&gt;
&lt;p&gt;使运行sudo的时候的环境变量的设置不会改变。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="sdn"></category><category term="mininet"></category></entry><entry><title>Python 装饰器之 functools.wraps</title><link href="http://www.sunisdown.me/python-zhuang-shi-qi-zhi-functoolswraps.html" rel="alternate"></link><published>2013-07-08T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2013-07-08:python-zhuang-shi-qi-zhi-functoolswraps.html</id><summary type="html">&lt;p&gt;在看 Bottle 代码中看见 functools.wraps 这种用法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_default_app_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return a callable that relays calls to the current default app. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bottle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bottle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ka&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ka&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之前没有看过，于是查文档了解了一下他的用处 先下定义： &lt;strong&gt;functools.wraps
是 ``装饰器``的``装饰器``&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要明白 functiools.wraps 首先要明白 Python 的 &lt;tt class="docutils literal"&gt;Decorator&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="decorator"&gt;
&lt;h2&gt;Decorator&lt;/h2&gt;
&lt;p&gt;在以前的 Blog 中曾经简单写过 Decorator。这次需要讲的更细一些。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Decorator 通过返回包装对象实现间接调用,以此插入额外逻辑。&lt;/tt&gt;是从老大那边偷来的哪里摘抄来的，应该算是言简意赅了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@dec2&lt;/span&gt;
&lt;span class="nd"&gt;@dec1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以还原成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dec2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dec1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@decomaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以还原成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decomaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;before func&amp;quot;&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; &lt;span class="c1"&gt;#返回 inner 函数对象&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nd"&gt;@outer&lt;/span&gt;  &lt;span class="c1"&gt;# 解释器执⾏行 foo = outer(foo)&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inner&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个过程中执行了下面几步&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;函数 foo 作为 装饰器 outer 的参数被传入&lt;/li&gt;
&lt;li&gt;函数 inner 对 func 进行调用，然后装饰器 outer 返回 inner&lt;/li&gt;
&lt;li&gt;原来的函数名 foo 关联到
inner，如上面的&lt;tt class="docutils literal"&gt;foo &amp;lt;function __main__.inner&amp;gt;&lt;/tt&gt; 所示，调用 foo
时间上是在调用 inner&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;装饰器不仅可以用函数返回包装对象，也可以是个类，不过这种方法太尼玛啰嗦，这里就不介绍了，想了解的自己去翻吧。下面我们写一个有点用处的
Decorator。 假想我们有个coordinate类，而且这个类提供了
&lt;tt class="docutils literal"&gt;x, y&lt;/tt&gt;坐标，而我们要对两个coordinate 对象进行计算。代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Coord: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面例子中的&lt;tt class="docutils literal"&gt;sub(one, two)&lt;/tt&gt;与&lt;tt class="docutils literal"&gt;three&lt;/tt&gt;都有负数，当我们把坐标限制在第一象限时，这两个就不符合我们的要求，用
Decorator 来做一个检测再好不过了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;checker&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nd"&gt;@wrapper&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nd"&gt;@wrapper&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Coordinate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;Coord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，只计算的函数&lt;tt class="docutils literal"&gt;add&lt;/tt&gt;与&lt;tt class="docutils literal"&gt;sub&lt;/tt&gt;前面加一个 Decorator
就可以完成坐标的校验。比在函数内实现要优雅一些。&lt;/p&gt;
&lt;p&gt;Decorator 还可以为类增加额外的成员，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;staticmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HELLO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nd"&gt;@hello&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;World&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="k"&gt;pass&lt;/span&gt;
   &lt;span class="o"&gt;....&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HELLO&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="functools-wraps"&gt;
&lt;h3&gt;functools.wraps&lt;/h3&gt;
&lt;p&gt;我们在使用 Decorator 的过程中，难免会损失一些原本的功能信息。直接拿
stackoverflow 里面的栗子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; was called&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;with_logging&lt;/span&gt;

&lt;span class="nd"&gt;@logged&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;does some math&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;does some math&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;with_logging&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而functools.wraps 则可以将原函数对象的指定属性复制给包装函数对象, 默认有
&lt;tt class="docutils literal"&gt;__module__&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;__name__&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;__doc__&lt;/tt&gt;,或者通过参数选择。代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_logging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; was called&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;with_logging&lt;/span&gt;

&lt;span class="nd"&gt;@logged&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;does some math&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# prints &amp;#39;f&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;   &lt;span class="c1"&gt;# prints &amp;#39;does some math&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="decorator"></category></entry><entry><title>python之 unicode_literals</title><link href="http://www.sunisdown.me/pythonzhi-unicode_literals.html" rel="alternate"></link><published>2013-06-03T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2013-06-03:pythonzhi-unicode_literals.html</id><summary type="html">&lt;p&gt;在邮件列表中看见有人在讨论github上面的内容,然后看见一阁大牛说&amp;quot;看见别人的python代码没有from
__future__ import unicode_literals就想fork改掉…&amp;quot;&lt;/p&gt;
&lt;p&gt;之前代码中确实没有加这个,嗯,受教啦&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from __future__ import unicode_literals
&lt;/pre&gt;
&lt;p&gt;是python2.6
之后新增加的新特性,可以使得所有的字符串文本成为Unicode字符串.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
In [4]: from __future__ import unicode_literals

In [5]: a = '你好'

In [6]: a
Out[6]: u'\u4f60\u597d'
&lt;/pre&gt;
</summary><category term="python"></category><category term="unicode"></category><category term="str"></category></entry><entry><title>Python 之 enumerate</title><link href="http://www.sunisdown.me/python-zhi-enumerate.html" rel="alternate"></link><published>2013-06-01T00:00:00+08:00</published><author><name>SunisDown</name></author><id>tag:www.sunisdown.me,2013-06-01:python-zhi-enumerate.html</id><summary type="html">&lt;p&gt;今天看到enumerate 这个函数,然后Google之,发现limodou大牛写过enumerate了~&lt;/p&gt;
&lt;p&gt;enumerate 主要是用再类似的场景:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In &lt;span class="o"&gt;[&lt;/span&gt;20&lt;span class="o"&gt;]&lt;/span&gt;:for i in xrange&lt;span class="o"&gt;(&lt;/span&gt;len&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;))&lt;/span&gt;:
                    print i, a&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;
    ....:
                &lt;span class="m"&gt;0&lt;/span&gt; 1
                &lt;span class="m"&gt;1&lt;/span&gt; 2
                &lt;span class="m"&gt;2&lt;/span&gt; 3
                &lt;span class="m"&gt;3&lt;/span&gt; alkj
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用enumerate可以简化代码为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In &lt;span class="o"&gt;[&lt;/span&gt;21&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="k"&gt;for&lt;/span&gt; i, j in enumerate&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;:
    ....:     print i, j
    ....:
                &lt;span class="m"&gt;0&lt;/span&gt; 1
                &lt;span class="m"&gt;1&lt;/span&gt; 2
                &lt;span class="m"&gt;2&lt;/span&gt; 3
                &lt;span class="m"&gt;3&lt;/span&gt; alkj

&lt;span class="o"&gt;{&lt;/span&gt;i:j &lt;span class="k"&gt;for&lt;/span&gt; i,j in enumerate&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abcdef&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="enumerate"></category></entry></feed>